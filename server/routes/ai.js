// server/routes/ai.js
'use strict';

const express = require('express');
const router = express.Router();
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
const { v4: uuidv4 } = require('uuid');
const FormData = require('form-data');
const child_process = require('child_process');
const util = require('util');
const exec = util.promisify(child_process.exec);

const { getFbUserToken } = require('../tokenStore');

// ---------- helpers ----------
function absolutePublicUrl(relativePath) {
  const base = process.env.PUBLIC_BASE_URL || process.env.RENDER_EXTERNAL_URL || 'https://smartmark-mvp.onrender.com';
  if (!relativePath) return '';
  if (/^https?:\/\//i.test(relativePath)) return relativePath;
  return `${base}${relativePath}`;
}
function getUserToken(req) {
  return req?.body?.userAccessToken || getFbUserToken() || null;
}
async function uploadVideoToAdAccount(adAccountId, userAccessToken, fileUrl, name = 'SmartMark Video', description = 'Generated by SmartMark') {
  const url = `https://graph.facebook.com/v23.0/act_${String(adAccountId).replace(/^act_/, '')}/advideos`;
  const form = new FormData();
  form.append('file_url', fileUrl);
  form.append('name', name);
  form.append('description', description);
  const resp = await axios.post(url, form, { headers: form.getHeaders(), params: { access_token: userAccessToken } });
  return resp.data;
}

// ---------- OpenAI / Pexels ----------
const { OpenAI } = require('openai');
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const PEXELS_API_KEY = process.env.PEXELS_API_KEY;
const PEXELS_IMG_BASE = 'https://api.pexels.com/v1/search';
const PEXELS_VID_BASE = 'https://api.pexels.com/videos/search';

// ---------- training context ----------
const DATA_DIR = path.join(__dirname, '../data');
const ALLOWED_EXT = new Set(['.txt', '.md', '.markdown', '.json']);
const MAX_FILE_MB = 1.5;
const MAX_TOTAL_CHARS = 45_000;

function loadTrainingContext() {
  if (!fs.existsSync(DATA_DIR)) return '';
  const files = fs.readdirSync(DATA_DIR)
    .map(f => path.join(DATA_DIR, f))
    .filter(full => {
      const ext = path.extname(full).toLowerCase();
      try {
        const st = fs.statSync(full);
        return st.isFile() && ALLOWED_EXT.has(ext) && st.size <= MAX_FILE_MB * 1024 * 1024;
      } catch { return false; }
    });
  let ctx = '';
  for (const f of files) {
    try {
      const ext = path.extname(f).toLowerCase();
      let text = fs.readFileSync(f, 'utf8');
      if (ext === '.json') { try { text = JSON.stringify(JSON.parse(text)); } catch {} }
      if (!text.trim()) continue;
      const block = `\n\n### SOURCE: ${path.basename(f)}\n${text}\n`;
      if (ctx.length + block.length <= MAX_TOTAL_CHARS) ctx += block;
    } catch {}
  }
  return ctx.trim();
}
let customContext = loadTrainingContext();

router.get('/test', (_req, res) => res.json({ msg: 'AI route is working!' }));

// ---------- scraper (tolerant) ----------
async function getWebsiteText(url) {
  try {
    const clean = String(url || '').trim();
    if (!clean || !/^https?:\/\//i.test(clean)) throw new Error('Invalid URL');
    const { data, headers } = await axios.get(clean, { timeout: 7000, maxRedirects: 3, validateStatus: s => s < 400 });
    if (!headers['content-type']?.includes('text/html')) throw new Error('Not HTML');
    const body = String(data)
      .replace(/<script[\s\S]*?<\/script>/gi, '')
      .replace(/<style[\s\S]*?<\/style>/gi, '')
      .replace(/<[^>]+>/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
    if (body.length < 200 || /cloudflare|access denied|429/i.test(body)) throw new Error('blocked/short');
    return body.slice(0, 3500);
  } catch (e) {
    console.warn('scrape fail:', url || '(empty)', e.message);
    return '';
  }
}

// ---------- ad copy (unchanged) ----------
router.post('/generate-ad-copy', async (req, res) => {
  const { description = '', businessName = '', url = '' } = req.body;
  if (!description && !businessName && !url) return res.status(400).json({ error: 'Please provide at least a description.' });

  let prompt =
`You are an expert direct-response ad copywriter.
${customContext ? `TRAINING CONTEXT:\n${customContext}\n\n` : ''}Write only the exact words for a spoken video ad script (45–55 words). Hook → benefit → strong CTA. Friendly, trustworthy, conversion-focused.`;
  if (description) prompt += `\nBusiness Description: ${description}`;
  if (businessName) prompt += `\nBusiness Name: ${businessName}`;
  if (url) prompt += `\nWebsite: ${url}`;
  prompt += `\nOutput ONLY the script text.`;

  try {
    const r = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 120
    });
    res.json({ adCopy: r.choices?.[0]?.message?.content?.trim() || '' });
  } catch (e) {
    console.error('adcopy fail:', e?.response?.data || e.message);
    res.status(500).json({ error: 'Failed to generate ad copy' });
  }
});

// ---------- audience helpers ----------
const DEFAULT_AUDIENCE = {
  brandName: '', demographic: '', ageRange: '18-65',
  location: 'US', interests: 'Business, Restaurants', fbInterestIds: [], summary: ''
};

async function extractKeywords(text) {
  const prompt = `
Extract up to 6 compact keywords (one or two words each) from this text that would be useful Facebook interest seeds.
Return them as a comma-separated list ONLY. No extra words.

TEXT:
"""${(text || '').slice(0, 3000)}"""`.trim();

  try {
    const r = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 40,
      temperature: 0.2
    });
    return (r.choices?.[0]?.message?.content || '')
      .replace(/[\n.]/g, '')
      .toLowerCase()
      .split(',')
      .map(s => s.trim())
      .filter(Boolean);
  } catch { return []; }
}

async function getFbInterestIds(keywords, fbToken) {
  const out = [];
  for (const k of keywords) {
    try {
      const r = await axios.get('https://graph.facebook.com/v18.0/search', {
        params: { type: 'adinterest', q: k, access_token: fbToken, limit: 1 }
      });
      if (r.data?.data?.[0]?.id) out.push({ id: r.data.data[0].id, name: r.data.data[0].name });
    } catch {}
  }
  return out;
}

router.post('/detect-audience', async (req, res) => {
  const { url } = req.body;
  const fbToken = req.body.fbToken || getFbUserToken();
  if (!url) return res.status(400).json({ error: 'Missing URL' });

  const websiteText = await getWebsiteText(url);
  const safe = websiteText.length > 100 ? websiteText : '[WEBSITE TEXT UNAVAILABLE]';

  const prompt = `
${customContext ? `TRAINING CONTEXT:\n${customContext}\n\n` : ''}
Analyze this website's homepage content and answer ONLY in the following JSON format:
{
  "brandName": "",
  "demographic": "",
  "ageRange": "",
  "location": "",
  "interests": "",
  "summary": ""
}
Website homepage text:
"""${safe}"""`.trim();

  try {
    const r = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 220,
      temperature: 0.3
    });

    const txt = r.choices?.[0]?.message?.content?.trim() || '{}';
    let aud;
    try {
      const m = txt.match(/\{[\s\S]*\}/);
      aud = JSON.parse(m ? m[0] : txt);
      aud = {
        brandName: aud.brandName || '',
        demographic: aud.demographic || '',
        ageRange: /^\d{2}-\d{2}$/.test(aud.ageRange || '') ? aud.ageRange : '18-65',
        location: (aud.location || 'US').toString().trim().toUpperCase() || 'US',
        interests: aud.interests || 'Business, Restaurants',
        summary: aud.summary || ''
      };
    } catch {
      return res.json({ audience: DEFAULT_AUDIENCE });
    }

    if (fbToken) {
      const kws = await extractKeywords(websiteText);
      const fb = await getFbInterestIds(kws, fbToken);
      aud.fbInterestIds = fb.map(i => i.id);
      aud.fbInterestNames = fb.map(i => i.name);
    } else {
      aud.fbInterestIds = [];
      aud.fbInterestNames = [];
    }
    res.json({ audience: aud });
  } catch {
    res.json({ audience: DEFAULT_AUDIENCE });
  }
});

// ---------- simple keyword map (images) ----------
const IMAGE_KEYWORD_MAP = [
  { match: ['protein powder','protein','supplement','muscle','fitness','gym'], keyword: 'gym workout' },
  { match: ['clothing','fashion','apparel','accessory'], keyword: 'fashion model' },
  { match: ['makeup','cosmetic','skincare'], keyword: 'makeup application' },
  { match: ['hair','shampoo'], keyword: 'hair care' },
  { match: ['food','pizza','burger','meal','snack'], keyword: 'delicious food' },
  { match: ['baby','kids','toys'], keyword: 'happy children' },
  { match: ['pet','dog','cat'], keyword: 'pet dog cat' },
  { match: ['electronics','phone','laptop','tech'], keyword: 'tech gadgets' },
  { match: ['home','kitchen','decor'], keyword: 'modern home' },
  { match: ['art','painting','craft'], keyword: 'painting art' },
  { match: ['coffee','cafe'], keyword: 'coffee shop' }
];
function getImageKeyword(industry = '', url = '') {
  const input = `${industry} ${url}`.toLowerCase();
  for (const row of IMAGE_KEYWORD_MAP) if (row.match.some(m => input.includes(m))) return row.keyword;
  return industry || 'ecommerce';
}

// ---------- simple, clean overlay image (kept) ----------
function escSVG(s) {
  return String(s||'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&apos;');
}
function fontForHeadline(text) {
  const len = (text||'').length;
  if (len <= 14) return 56;
  if (len <= 20) return 50;
  if (len <= 26) return 44;
  return 38;
}
const BANNED_TERMS = /\b(unisex|global|vibes?|forward|finds?|chic|bespoke|avant|couture)\b/i;
function cleanHeadline(h) {
  h = String(h || '').replace(/[^a-z0-9 &\-]/gi,' ').replace(/\s+/g,' ').trim();
  if (!h || BANNED_TERMS.test(h)) return '';
  const words = h.split(' ');
  if (words.length < 2 || words.length > 4) return '';
  return h.toUpperCase();
}
function cleanCTA(c) {
  c = String(c || '').replace(/[^a-z0-9 &\-]/gi,' ').replace(/\s+/g,' ').trim();
  if (!c) return '';
  let words = c.split(' ').slice(0,3).join(' ');
  if (!/[.!?]$/.test(words)) words += '!';
  return words.charAt(0).toUpperCase() + words.slice(1);
}
const FALLBACK_HEADLINES = {
  'Fashion': ['New Arrivals', 'Everyday Style', 'Modern Looks', 'Wardrobe Refresh'],
  'General': ['Find What You Love', 'Great Picks Today', 'Everyday Essentials']
};
const FALLBACK_CTA = ['Shop Now!', 'See More!', 'Learn More!'];

async function buildOverlayImage({ imageUrl, headlineHint = '', ctaHint = '' }) {
  const W = 1200, H = 627;
  const imgRes = await axios.get(imageUrl, { responseType: 'arraybuffer' });
  const baseBuf = await sharp(imgRes.data).resize(W, H, { fit: 'cover' }).jpeg({ quality: 92 }).toBuffer();
  const base64 = baseBuf.toString('base64');

  let headline = cleanHeadline(headlineHint) || FALLBACK_HEADLINES.General[Math.floor(Math.random()*FALLBACK_HEADLINES.General.length)].toUpperCase();
  let cta = cleanCTA(ctaHint) || FALLBACK_CTA[0];

  const ACCENT = '#14e7b9', LIGHT = '#f2f5f6';
  const fontSize = fontForHeadline(headline);

  const svg =
`<svg width="${W}" height="${H}" viewBox="0 0 ${W} ${H}" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="gradB" x1="0" y1="0" x2="0" y2="1">
      <stop offset="0%" stop-color="#00000000"/>
      <stop offset="100%" stop-color="#000000aa"/>
    </linearGradient>
  </defs>
  <image href="data:image/jpeg;base64,${base64}" x="0" y="0" width="${W}" height="${H}"/>
  <rect x="0" y="${H-140}" width="${W}" height="140" fill="url(#gradB)"/>
  <text x="40" y="${H-60}" text-anchor="start" font-family="Times New Roman, Times, serif"
        font-size="${fontSize}" font-weight="700" fill="${LIGHT}" letter-spacing="2">${escSVG(headline)}</text>
  <text x="${W-40}" y="${H-56}" text-anchor="end" font-family="Helvetica, Arial, sans-serif"
        font-size="22" font-weight="800" fill="${ACCENT}" letter-spacing="1" text-decoration="underline">${escSVG(cta)}</text>
</svg>`;
  const outDir = process.env.RENDER ? '/tmp/generated' : path.join(__dirname, '../public/generated');
  if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });
  const file = `${uuidv4()}.jpg`;
  fs.writeFileSync(path.join(outDir, file), await sharp(Buffer.from(svg)).jpeg({ quality: 95 }).toBuffer());
  return { publicUrl: `/generated/${file}`, absoluteUrl: absolutePublicUrl(`/generated/${file}`) };
}

// ---------- music (server/Music/music) ----------
function findMusicDir() {
  const candidates = [
    path.join(__dirname, '..', 'Music', 'music'),
    path.join(__dirname, '..', 'music', 'music'),
    path.join(__dirname, '..', 'Music'),
    path.join(__dirname, '..', 'music')
  ];
  for (const p of candidates) { try { if (fs.existsSync(p) && fs.statSync(p).isDirectory()) return p; } catch {} }
  return null;
}
function pickMusicFile(keywords = []) {
  const base = findMusicDir();
  if (!base) return null;
  const files = fs.readdirSync(base).filter(f => /\.mp3$/i.test(f));
  if (!files.length) return null;
  const lower = files.map(f => f.toLowerCase());
  for (const kw of keywords.map(x => String(x).toLowerCase())) {
    let i = lower.findIndex(f => f === `${kw}.mp3`); if (i !== -1) return path.join(base, files[i]);
    i = lower.findIndex(f => f.includes(kw)); if (i !== -1) return path.join(base, files[i]);
  }
  return path.join(base, files[0]);
}

// ---------- small utils ----------
function withTimeout(promise, ms, msg = 'Timeout') {
  return Promise.race([promise, new Promise((_, rej) => setTimeout(() => rej(new Error(msg)), ms))]);
}
async function downloadFileWithTimeout(url, dest, timeoutMs = 30000, maxSizeMB = 5) {
  return new Promise((resolve, reject) => {
    if (!url || !/^https?:\/\//i.test(String(url))) return reject(new Error('Invalid clip URL'));
    const writer = fs.createWriteStream(dest);
    let timedOut = false;
    const timeout = setTimeout(() => { timedOut = true; writer.close(); try { fs.unlinkSync(dest); } catch {}; reject(new Error('Download timed out')); }, timeoutMs);
    axios({ url, method: 'GET', responseType: 'stream' })
      .then(resp => {
        let bytes = 0;
        resp.data.on('data', ch => {
          bytes += ch.length;
          if (bytes > maxSizeMB * 1024 * 1024 && !timedOut) { timedOut = true; writer.close(); try { fs.unlinkSync(dest); } catch {}; clearTimeout(timeout); reject(new Error('File too large')); }
        });
        resp.data.pipe(writer);
        writer.on('finish', () => { clearTimeout(timeout); if (!timedOut) resolve(dest); });
        writer.on('error', err => { clearTimeout(timeout); try { fs.unlinkSync(dest); } catch {}; if (!timedOut) reject(err); });
      })
      .catch(err => { clearTimeout(timeout); try { fs.unlinkSync(dest); } catch {}; reject(err); });
  });
}
function safeFFText(t) {
  return String(t || '')
    .replace(/[\n\r]/g, ' ')
    .replace(/:/g, '\\:')
    .replace(/'/g, "\\'")
    .replace(/[^A-Za-z0-9 !?&\\'\\:\\-]/g, ' ')
    .toUpperCase();
}
function simpleCTA(input) {
  const t = String(input || '').toLowerCase();
  if (t.includes('buy')) return 'BUY NOW!';
  if (t.includes('shop')) return 'SHOP NOW!';
  if (t.includes('order')) return 'ORDER NOW!';
  if (t.includes('join')) return 'JOIN NOW!';
  if (t.includes('sign')) return 'SIGN UP!';
  if (t.includes('book')) return 'BOOK NOW!';
  if (t.includes('learn')) return 'LEARN MORE!';
  return 'SHOP NOW!';
}

// ---------- VIDEO (simple MVP: normal voice, >=15s visuals, clean CTA band, music) ----------
router.post('/generate-video-ad', async (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  try {
    const { url = '', answers = {}, regenerateToken = '' } = req.body;

    const token = getUserToken(req);
    const fbAdAccountId =
      req.body.fbAdAccountId || req.query.adAccountId || req.headers['x-fb-ad-account-id'] || null;

    const VIDEO = { W: 640, H: 360, FPS: 24, CLIP: 5 }; // simple 3 cuts (5s each) for 15s
    const TO = { PEXELS: 30000, DL: 45000, SCALE: 45000, CONCAT: 30000, TRIM: 20000, OVERMUX: 90000, FPROBE: 8000 };

    // search term
    const industry = answers?.industry || answers?.productType || '';
    let term = 'shopping';
    if (industry) term = industry.toLowerCase().replace(/[^a-z0-9\s]/g,' ').trim() || term;

    // fetch Pexels videos
    let clips = [];
    try {
      const r = await withTimeout(
        axios.get(PEXELS_VID_BASE, { headers: { Authorization: PEXELS_API_KEY }, params: { query: term, per_page: 60, cb: Date.now() + (regenerateToken || '') } }),
        TO.PEXELS, 'Pexels API timed out'
      );
      clips = r.data.videos || [];
    } catch (e) {
      console.error('Pexels vid fetch failed', e?.response?.data || e.message);
      return res.status(500).json({ error: 'Stock video fetch failed', detail: e.message });
    }
    if (!clips?.length) return res.status(404).json({ error: 'No stock videos found' });

    // candidate links
    let candidates = [];
    for (const v of clips) {
      const files = (v.video_files || [])
        .filter(f => f?.link && /\.mp4(\?|$)/i.test(f.link))
        .sort((a,b) => (a.width || 9999) - (b.width || 9999)); // prefer smaller for speed
      const best = files.find(f => f.quality === 'sd') || files[0];
      if (best?.link) candidates.push(best.link);
    }
    candidates = Array.from(new Set(candidates));
    if (candidates.length < 3) return res.status(404).json({ error: 'Not enough usable clips' });

    // work dir
    const tmp = path.join(__dirname, '../tmp');
    if (!fs.existsSync(tmp)) fs.mkdirSync(tmp, { recursive: true });

    // download + scale 3x5s
    const paths = [];
    let p = 0;
    while (paths.length < 3 && p < candidates.length) {
      const src = candidates[p++];
      const raw = path.join(tmp, `${uuidv4()}.mp4`);
      try {
        await withTimeout(downloadFileWithTimeout(src, raw, TO.DL, 6), TO.DL + 2000, 'download timeout');
        const scaled = raw.replace('.mp4', '_s.mp4');
        await withTimeout(
          exec(
            `ffmpeg -y -i "${raw}" ` +
            `-vf "scale=${VIDEO.W}:${VIDEO.H}:force_original_aspect_ratio=decrease,` +
            `pad=${VIDEO.W}:${VIDEO.H}:(ow-iw)/2:(oh-ih)/2,setsar=1,format=yuv420p,fps=${VIDEO.FPS}" ` +
            `-t ${VIDEO.CLIP} -r ${VIDEO.FPS} -c:v libx264 -preset superfast -crf 26 -an "${scaled}"`
          ),
          TO.SCALE, 'scale timeout'
        );
        try { fs.unlinkSync(raw); } catch {}
        paths.push(scaled);
      } catch (e) {
        try { fs.unlinkSync(raw); } catch {}
      }
    }
    if (paths.length < 3) return res.status(500).json({ error: 'Video preparation failed' });

    // script: simple words, ~15s target (we still match visuals to VO to be safe)
    const ctaText = simpleCTA(answers?.cta);
    let prompt =
      `Write a simple, clear spoken ad script for an online store.\n` +
      `Natural language. Avoid fancy terms. Keep it friendly.\n` +
      `End with this exact CTA: '${ctaText}'.\n` +
      `Target about 15 seconds at normal speaking pace. ONLY the spoken words.`;
    if (industry) prompt += `\nCategory: ${industry}`;
    if (answers?.businessName) prompt += `\nBrand: ${answers.businessName}`;
    if (url) prompt += `\nWebsite: ${url}`;

    let script = 'Discover what you love today. Shop now!';
    try {
      const r = await withTimeout(
        openai.chat.completions.create({ model: 'gpt-4o', messages: [{ role: 'user', content: prompt }], max_tokens: 110, temperature: 0.4 }),
        15000, 'OpenAI timeout'
      );
      script = (r.choices?.[0]?.message?.content?.trim() || script).replace(/\s+/g, ' ');
      // scrub any awkward words
      script = script.replace(BANNED_TERMS, '').replace(/\s{2,}/g, ' ').trim();
    } catch {}

    // TTS (normal speed)
    const ttsPath = path.join(tmp, `${uuidv4()}.mp3`);
    try {
      const ttsRes = await withTimeout(openai.audio.speech.create({ model: 'tts-1', voice: 'alloy', input: script }), 20000, 'TTS timeout');
      fs.writeFileSync(ttsPath, Buffer.from(await ttsRes.arrayBuffer()));
    } catch (e) {
      console.error('TTS failed', e);
      return res.status(500).json({ error: 'TTS generation failed', detail: e.message });
    }

    // probe vo duration
    async function probeDur(file) {
      try {
        const { stdout } = await withTimeout(exec(`ffprobe -v error -show_entries format=duration -of default=nokey=1:noprint_wrappers=1 "${file}"`), TO.FPROBE, 'ffprobe timeout');
        const s = parseFloat(stdout.trim());
        return isNaN(s) ? 0 : s;
      } catch { return 0; }
    }
    let voDur = await probeDur(ttsPath);
    if (voDur <= 0) voDur = 12.0;

    // final duration = max(15s, VO). visuals never end before voice.
    const finalDur = Math.max(15.0, Math.min(voDur, 30.0));

    // concat enough 5s cuts to cover finalDur
    const need = Math.max(1, Math.ceil(finalDur / VIDEO.CLIP));
    while (paths.length < need) paths.push(paths[paths.length - 1]);
    const listPath = path.join(tmp, `${uuidv4()}.txt`);
    fs.writeFileSync(listPath, paths.slice(0, need).map(pth => `file '${pth}'`).join('\n'));

    const outDir = process.env.RENDER ? '/tmp/generated' : path.join(__dirname, '../public/generated');
    if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });
    const id = uuidv4();
    const concatPath = path.join(outDir, `${id}.concat.mp4`);
    const trimmedPath = path.join(outDir, `${id}.trim.mp4`);
    const outPath = path.join(outDir, `${id}.mp4`);

    await withTimeout(exec(`ffmpeg -y -f concat -safe 0 -i "${listPath}" -c copy "${concatPath}"`), TO.CONCAT, 'concat timeout');
    await withTimeout(exec(`ffmpeg -y -i "${concatPath}" -t ${finalDur.toFixed(2)} -c copy "${trimmedPath}"`), TO.TRIM, 'trim timeout');

    // clean, simple bottom CTA band (3.5s at end)
    const bandStart = Math.max(0.6, finalDur - 3.5), bandEnd = finalDur;
    const fontfile = '/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf';
    const cta = safeFFText(ctaText);
    const videoFilter =
      `fps=${VIDEO.FPS},format=yuv420p,` +
      `drawbox=x=0:y=h-84:w=iw:h=84:color=black@0.42:t=fill:enable='between(t,${bandStart.toFixed(2)},${bandEnd.toFixed(2)})',` +
      (fs.existsSync(fontfile)
        ? `drawtext=fontfile='${fontfile}':text='${cta}':fontcolor=white@0.98:fontsize=36:shadowcolor=black@0.7:shadowx=3:shadowy=3:x=(w-text_w)/2:y=h-66:enable='between(t,${bandStart.toFixed(2)},${bandEnd.toFixed(2)})'`
        : `drawtext=text='${cta}':fontcolor=white@0.98:fontsize=36:shadowcolor=black@0.7:shadowx=3:shadowy=3:x=(w-text_w)/2:y=h-66:enable='between(t,${bandStart.toFixed(2)},${bandEnd.toFixed(2)})'`
      );

    // background music (constant low volume), trimmed/padded to finalDur
    let bgKeywords = [];
    if (industry) bgKeywords.push(industry);
    if (answers?.businessName) bgKeywords.push(answers.businessName);
    let bgMusicPath = null;
    try { bgMusicPath = pickMusicFile(bgKeywords); } catch {}
    const musicInput = bgMusicPath ? ` -i "${bgMusicPath}"` : '';

    // Build audio filter: keep voice natural speed; pad or trim mix to finalDur
    // Also avoid the previous mp3/aac container mismatch by NOT re-encoding to mp3; we mux to MP4/AAC only.
    let filterComplex, mapArgs;
    if (bgMusicPath) {
      filterComplex =
        `[0:v]${videoFilter}[v];` +
        `[1:a]aformat=sample_rates=44100:channel_layouts=stereo,atrim=0:${finalDur.toFixed(2)},apad=pad_dur=${finalDur.toFixed(2)}[voice];` +
        `[2:a]aformat=sample_rates=44100:channel_layouts=stereo,volume=0.20,atrim=0:${finalDur.toFixed(2)},apad=pad_dur=${finalDur.toFixed(2)}[bg];` +
        `[voice][bg]amix=inputs=2:duration=first:normalize=1[mix]`;
      mapArgs = `-map "[v]" -map "[mix]"`;
    } else {
      filterComplex =
        `[0:v]${videoFilter}[v];` +
        `[1:a]aformat=sample_rates=44100:channel_layouts=stereo,atrim=0:${finalDur.toFixed(2)},apad=pad_dur=${finalDur.toFixed(2)}[mix]`;
      mapArgs = `-map "[v]" -map "[mix]"`;
    }

    await withTimeout(
      exec(
        `ffmpeg -y -i "${trimmedPath}" -i "${ttsPath}"${musicInput} ` +
        `-filter_complex "${filterComplex}" ${mapArgs} ` +
        `-t ${finalDur.toFixed(2)} ` +
        `-c:v libx264 -preset superfast -crf 26 -r ${VIDEO.FPS} ` +
        `-c:a aac -b:a 160k -ar 44100 -movflags +faststart "${outPath}"`
      ),
      TO.OVERMUX, 'overlay+mux timeout'
    );

    // ensure ready
    let ok = false;
    for (let i = 0; i < 40; i++) {
      try { if (fs.statSync(outPath).size > 200000) { ok = true; break; } } catch {}
      await new Promise(r => setTimeout(r, 200));
    }
    if (!ok) return res.status(500).json({ error: 'Video output not ready' });

    // cleanup
    [concatPath, trimmedPath, ...paths, listPath].forEach(pth => { try { fs.unlinkSync(pth); } catch {} });
    try { fs.unlinkSync(ttsPath); } catch {}

    const publicVideoUrl = `/generated/${id}.mp4`;
    const absoluteUrl = absolutePublicUrl(publicVideoUrl);

    // optional FB upload
    let fbVideoId = null;
    try {
      if (fbAdAccountId && token) {
        const up = await uploadVideoToAdAccount(fbAdAccountId, token, absoluteUrl, 'SmartMark Generated Video', 'Generated by SmartMark');
        fbVideoId = up?.id || null;
      }
    } catch (e) {
      console.error('FB upload fail:', e?.response?.data || e.message);
    }

    return res.json({
      videoUrl: publicVideoUrl,
      absoluteVideoUrl: absoluteUrl,
      fbVideoId,
      video: { url: publicVideoUrl, script, overlayText: ctaText, voice: 'alloy' },
      script,
      overlayText: ctaText,
      voice: 'alloy'
    });
  } catch (err) {
    console.error('video route error:', err);
    if (!res.headersSent) return res.status(500).json({ error: 'Failed to generate video ad', detail: err?.message || 'Unknown error' });
  }
});

// ---------- IMAGE: fetch + overlay (kept) ----------
router.post('/generate-image-from-prompt', async (req, res) => {
  try {
    const { url = '', industry = '', regenerateToken = '', answers = {} } = req.body;
    const keyword = getImageKeyword(industry, url);

    let photos = [];
    try {
      const r = await axios.get(PEXELS_IMG_BASE, {
        headers: { Authorization: PEXELS_API_KEY },
        params: { query: keyword, per_page: 100, cb: Date.now() + (regenerateToken || '') },
        timeout: 4800
      });
      photos = r.data.photos || [];
    } catch (e) {
      console.error('Pexels img fetch error:', e?.message || e);
      return res.status(500).json({ error: 'Image search failed' });
    }
    if (!photos.length) return res.status(404).json({ error: 'No images found.' });

    const idx = regenerateToken
      ? Math.abs([...regenerateToken].reduce((h, c) => (h * 31 + c.charCodeAt(0)) | 0, 0)) % photos.length
      : Math.floor(Math.random() * photos.length);

    const img = photos[idx];
    const baseUrl = img.src.large2x || img.src.original || img.src.large;

    // Simple, clean overlay using businessName/cta when available
    const headlineHint = answers?.businessName ? `${answers.businessName}` : (industry ? 'New Arrivals' : 'Great Picks');
    const ctaHint = answers?.cta || 'Shop Now!';

    let finalUrl = baseUrl;
    try {
      const { publicUrl } = await buildOverlayImage({ imageUrl: baseUrl, headlineHint, ctaHint });
      finalUrl = publicUrl;
    } catch (e) {
      console.warn('Overlay build fail; using base image:', e.message);
    }

    res.json({ imageUrl: finalUrl, photographer: img.photographer, pexelsUrl: img.url, keyword, totalResults: photos.length, usedIndex: idx });
  } catch (e) {
    console.error('image route fail:', e?.message || e);
    res.status(500).json({ error: 'Failed to fetch stock image', detail: e.message });
  }
});

module.exports = router;
