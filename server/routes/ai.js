// server/routes/ai.js
'use strict';

const express = require('express');
const router = express.Router();

// --- CORS for Vercel frontend (API only) ---
const ALLOW_ORIGINS = new Set([
  'http://localhost:3000',
  'http://127.0.0.1:3000',
  'https://smartmark-mvp.vercel.app',
  process.env.FRONTEND_ORIGIN,
  process.env.FRONTEND_URL,
].filter(Boolean));

router.use((req, res, next) => {
  const origin = req.headers.origin;
  if (origin && ALLOW_ORIGINS.has(origin)) {
    res.setHeader('Access-Control-Allow-Origin', origin);
    res.setHeader('Access-Control-Allow-Credentials', 'true');
  }
  res.setHeader('Vary', 'Origin');
  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,PUT,PATCH,DELETE,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, X-FB-AD-ACCOUNT-ID');
  res.setHeader('Access-Control-Max-Age', '86400');
  if (req.method === 'OPTIONS') return res.sendStatus(204);
  next();
});

const axios = require('axios');
const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
const { v4: uuidv4 } = require('uuid');
const FormData = require('form-data');
const child_process = require('child_process');
const util = require('util');
const exec = util.promisify(child_process.exec);
const seedrandom = require('seedrandom');
const { OpenAI } = require('openai');
const { getFbUserToken } = require('../tokenStore');

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const PEXELS_API_KEY = process.env.PEXELS_API_KEY;

// ---------- helpers ----------
function absolutePublicUrl(relativePath) {
  const base = process.env.PUBLIC_BASE_URL || process.env.RENDER_EXTERNAL_URL || 'https://smartmark-mvp.onrender.com';
  if (!relativePath) return '';
  if (/^https?:\/\//i.test(relativePath)) return relativePath;
  return `${base}${relativePath}`;
}
function getGeneratedDir() {
  if (process.env.GENERATED_DIR) return process.env.GENERATED_DIR;
  if (process.env.RENDER) return '/tmp/generated';
  return path.join(__dirname, '../public/generated');
}
function ensureGeneratedDir() {
  const dir = getGeneratedDir();
  try { fs.mkdirSync(dir, { recursive: true }); } catch {}
  return dir;
}
function getUserToken(req) {
  return req?.body?.userAccessToken || getFbUserToken() || null;
}
async function uploadVideoToAdAccount(adAccountId, userAccessToken, fileUrl, name = 'SmartMark Video', description = 'Generated by SmartMark') {
  const url = `https://graph.facebook.com/v23.0/act_${String(adAccountId).replace(/^act_/, '')}/advideos`;
  const form = new FormData();
  form.append('file_url', fileUrl);
  form.append('name', name);
  form.append('description', description);
  const resp = await axios.post(url, form, { headers: form.getHeaders(), params: { access_token: userAccessToken } });
  return resp.data;
}

// ---------- training context ----------
const DATA_DIR = path.join(__dirname, '../data');
const ALLOWED_EXT = new Set(['.txt', '.md', '.markdown', '.json']);
const MAX_FILE_MB = 1.5;
const MAX_TOTAL_CHARS = 45_000;
function loadTrainingContext() {
  if (!fs.existsSync(DATA_DIR)) return '';
  const files = fs.readdirSync(DATA_DIR)
    .map(f => path.join(DATA_DIR, f))
    .filter(full => {
      const ext = path.extname(full).toLowerCase();
      try {
        const st = fs.statSync(full);
        return st.isFile() && ALLOWED_EXT.has(ext) && st.size <= MAX_FILE_MB * 1024 * 1024;
      } catch { return false; }
    });
  let ctx = '';
  for (const f of files) {
    try {
      const ext = path.extname(f).toLowerCase();
      let text = fs.readFileSync(f, 'utf8');
      if (ext === '.json') { try { text = JSON.stringify(JSON.parse(text)); } catch {} }
      if (!text.trim()) continue;
      const block = `\n\n### SOURCE: ${path.basename(f)}\n${text}\n`;
      if (ctx.length + block.length <= MAX_TOTAL_CHARS) ctx += block;
    } catch {}
  }
  return ctx.trim();
}
let customContext = loadTrainingContext();

// ---------- scrape & test ----------
router.get('/test', (_req, res) => res.json({ msg: 'AI route is working!' }));

async function getWebsiteText(url) {
  try {
    const clean = String(url || '').trim();
    if (!clean || !/^https?:\/\//i.test(clean)) throw new Error('Invalid URL');
    const { data, headers } = await axios.get(clean, { timeout: 7000, maxRedirects: 3, validateStatus: s => s < 400 });
    if (!headers['content-type']?.includes('text/html')) throw new Error('Not HTML');
    const body = String(data)
      .replace(/<script[\s\S]*?<\/script>/gi, '')
      .replace(/<style[\s\S]*?<\/style>/gi, '')
      .replace(/<[^>]+>/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
    if (body.length < 200 || /cloudflare|access denied|429/i.test(body)) throw new Error('blocked/short');
    return body.slice(0, 3500);
  } catch (e) {
    console.warn('scrape fail:', url || '(empty)', e.message);
    return '';
  }
}

// ---------- topic derivation (to keep media on-topic) ----------
const STOP = new Set('a,an,and,are,at,be,by,for,from,go,have,i,in,is,it,of,on,or,our,out,shop,sign,learn,now,join,book,more,the,this,to,up,with,your,our,you,we,they,them,as,that,than,then,over,under,off,new,latest,deal,save,sale,free'.split(','));
function topKeywords(str, limit = 4) {
  const words = String(str || '').toLowerCase()
    .replace(/https?:\/\/\S+/g,' ')
    .replace(/[^a-z0-9\s]/g,' ')
    .split(/\s+/).filter(w => w && !STOP.has(w) && w.length > 2);
  const seen = new Set();
  const out = [];
  for (const w of words) { if (!seen.has(w)) { seen.add(w); out.push(w); if (out.length >= limit) break; } }
  return out;
}
function deriveTopicKeywords(answers = {}, url = '', fallback = 'ecommerce') {
  const parts = [
    answers.industry, answers.productType, answers.category, answers.subcategory,
    answers.description, answers.mainBenefit, answers.offer, answers.keywords,
    url
  ].filter(Boolean).join(' ');
  const kws = topKeywords(parts, 5);
  return kws.length ? kws.join(' ') : (answers.industry || fallback);
}

// ---------- ad copy ----------
router.post('/generate-ad-copy', async (req, res) => {
  const { description = '', businessName = '', url = '' } = req.body;
  if (!description && !businessName && !url) return res.status(400).json({ error: 'Please provide at least a description.' });

  let prompt =
`You are an expert direct-response ad copywriter.
${customContext ? `TRAINING CONTEXT:\n${customContext}\n\n` : ''}Write only the exact words for a spoken video ad script (55–70 words) which is ~15 seconds at normal pace. Hook → benefit → strong CTA. Friendly, simple, conversion-focused. Do NOT say or hint a URL or domain.`;
  if (description) prompt += `\nBusiness Description: ${description}`;
  if (businessName) prompt += `\nBusiness Name: ${businessName}`;
  if (url) prompt += `\nWebsite (for context only): ${url}`;
  prompt += `\nOutput ONLY the script text.`;

  try {
    const r = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 140,
      temperature: 0.4
    });
    res.json({ adCopy: r.choices?.[0]?.message?.content?.trim() || '' });
  } catch (e) {
    console.error('adcopy fail:', e?.response?.data || e.message);
    res.status(500).json({ error: 'Failed to generate ad copy' });
  }
});

// ---------- generate-campaign-assets ----------
router.post('/generate-campaign-assets', async (req, res) => {
  try {
    const { answers = {}, url = '' } = req.body;

    const brandFromUrl = (u = '') => {
      try {
        const h = new URL(u).hostname.replace(/^www\./, '');
        const base = h.split('.')[0] || 'Your Brand';
        return base.replace(/[-_]/g, ' ').replace(/\b\w/g, c => c.toUpperCase());
      } catch { return 'Your Brand'; }
    };
    const brand = (answers.businessName && String(answers.businessName).trim()) || brandFromUrl(url);
    const industry = (answers.industry && String(answers.industry).trim()) || '';
    const mainBenefit = (answers.mainBenefit && String(answers.mainBenefit).trim()) || '';
    const offer = (answers.offer && String(answers.offer).trim()) || '';

    let websiteText = '';
    try { if (url && /^https?:\/\//i.test(url)) websiteText = await getWebsiteText(url); } catch {}

    const prompt = `
${customContext ? `TRAINING CONTEXT:\n${customContext}\n\n` : ''}You are a senior direct-response copywriter.
Write JSON ONLY:

{
  "headline": "max 55 characters, plain, natural, no weird jargon",
  "body": "18-30 words, friendly, value+benefit, no emojis, no hashtags",
  "image_overlay_text": "3-4 words, generic CTA or benefit, ALL CAPS"
}

Rules:
- Prefer simple phrasing (avoid odd terms like "unisex fashion-forward" or "global finds").
- If unsure, default to very generic e-commerce phrasing.
- Do NOT include the website/domain anywhere.
- No quotes around fields beyond JSON syntax.
Context:
Brand: ${brand}
Industry: ${industry || '[general ecommerce]'}
Main benefit: ${mainBenefit || '[unspecified]'}
Offer: ${offer || '[none]'}
Website text (may be empty): """${(websiteText || '').slice(0, 1200)}"""`.trim();

    let headline = '', body = '', overlay = '';
    try {
      const r = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 220,
        temperature: 0.4
      });
      const raw = r.choices?.[0]?.message?.content?.trim() || '{}';
      const jsonStr = (raw.match(/\{[\s\S]*\}/) || [raw])[0];
      const parsed = JSON.parse(jsonStr);

      const clean = (s, max = 200) => String(s || '').replace(/\s+/g, ' ').trim().slice(0, max);
      headline = clean(parsed.headline, 55);
      body = clean(parsed.body, 220);
      overlay = clean(parsed.image_overlay_text, 28);
    } catch {
      headline = `${brand}: Shop New Arrivals`;
      body = `Discover quality picks for everyday life. Fast shipping, easy returns, and friendly support—see what’s new today.`;
      overlay = 'SHOP NOW';
    }

    headline = headline.replace(/["<>]/g, '').slice(0, 55);
    body = body.replace(/["<>]/g, '').replace(/\s+/g, ' ').trim();
    overlay = overlay.toUpperCase().replace(/[^A-Z0-9\s!]/g, '').replace(/\s+/g, ' ').trim();
    if (!overlay) overlay = 'SHOP NOW';

    return res.json({ headline, body, image_overlay_text: overlay });
  } catch (e) {
    console.error('generate-campaign-assets error:', e?.message || e);
    return res.json({
      headline: 'Shop Our Latest Picks',
      body: 'Quality products, fast shipping, and easy returns. Simple, reliable, and ready when you are—see what’s new today.',
      image_overlay_text: 'SHOP NOW'
    });
  }
});

// ---------- audience ----------
const DEFAULT_AUDIENCE = {
  brandName: '', demographic: '', ageRange: '18-65',
  location: 'US', interests: 'Business, Restaurants', fbInterestIds: [], summary: ''
};

async function extractKeywords(text) {
  const prompt = `
Extract up to 6 compact keywords (one or two words each) from this text that would be useful Facebook interest seeds.
Return them as a comma-separated list ONLY. No extra words.

TEXT:
"""${(text || '').slice(0, 3000)}"""`.trim();

  try {
    const r = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 40,
      temperature: 0.2
    });
    return (r.choices?.[0]?.message?.content || '')
      .replace(/[\n.]/g, '')
      .toLowerCase()
      .split(',')
      .map(s => s.trim())
      .filter(Boolean);
  } catch { return []; }
}

async function getFbInterestIds(keywords, fbToken) {
  const out = [];
  for (const k of keywords) {
    try {
      const r = await axios.get('https://graph.facebook.com/v18.0/search', {
        params: { type: 'adinterest', q: k, access_token: fbToken, limit: 1 }
      });
      if (r.data?.data?.[0]?.id) out.push({ id: r.data.data[0].id, name: r.data.data[0].name });
    } catch {}
  }
  return out;
}

router.post('/detect-audience', async (req, res) => {
  const { url } = req.body;
  const fbToken = req.body.fbToken || getFbUserToken();
  if (!url) return res.status(400).json({ error: 'Missing URL' });

  const websiteText = await getWebsiteText(url);
  const safe = websiteText.length > 100 ? websiteText : '[WEBSITE TEXT UNAVAILABLE]';

  const prompt = `
${customContext ? `TRAINING CONTEXT:\n${customContext}\n\n` : ''}
Answer ONLY this JSON:
{"brandName":"","demographic":"","ageRange":"","location":"","interests":"","summary":""}
Website homepage text:
"""${safe}"""`.trim();

  try {
    const r = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 220,
      temperature: 0.3
    });

    const txt = r.choices?.[0]?.message?.content?.trim() || '{}';
    let aud;
    try {
      const m = txt.match(/\{[\s\S]*\}/);
      aud = JSON.parse(m ? m[0] : txt);
      aud = {
        brandName: aud.brandName || '',
        demographic: aud.demographic || '',
        ageRange: /^\d{2}-\d{2}$/.test(aud.ageRange || '') ? aud.ageRange : '18-65',
        location: (aud.location || 'US').toString().trim().toUpperCase() || 'US',
        interests: aud.interests || 'Business, Restaurants',
        summary: aud.summary || ''
      };
    } catch {
      return res.json({ audience: DEFAULT_AUDIENCE });
    }

    if (fbToken) {
      const kws = await extractKeywords(websiteText);
      const fb = await getFbInterestIds(kws, fbToken);
      aud.fbInterestIds = fb.map(i => i.id);
      aud.fbInterestNames = fb.map(i => i.name);
    } else {
      aud.fbInterestIds = [];
      aud.fbInterestNames = [];
    }
    res.json({ audience: aud });
  } catch {
    res.json({ audience: DEFAULT_AUDIENCE });
  }
});

// ---------- image helpers & overlay ----------
const PEXELS_IMG_BASE = 'https://api.pexels.com/v1/search';
const IMAGE_KEYWORD_MAP = [
  { match: ['protein powder','protein','supplement','muscle','fitness','gym'], keyword: 'gym workout' },
  { match: ['clothing','fashion','apparel','accessory'], keyword: 'fashion model' },
  { match: ['makeup','cosmetic','skincare'], keyword: 'makeup application' },
  { match: ['hair','shampoo'], keyword: 'hair care' },
  { match: ['food','pizza','burger','meal','snack'], keyword: 'delicious food' },
  { match: ['baby','kids','toys'], keyword: 'happy children' },
  { match: ['pet','dog','cat'], keyword: 'pet dog cat' },
  { match: ['electronics','phone','laptop','tech'], keyword: 'tech gadgets' },
  { match: ['home','kitchen','decor'], keyword: 'modern home' },
  { match: ['art','painting','craft'], keyword: 'painting art' },
  { match: ['coffee','cafe'], keyword: 'coffee shop' },
];
function getImageKeyword(industry = '', url = '', answers = {}) {
  const derived = deriveTopicKeywords(answers, url, industry || 'ecommerce');
  if (derived && derived.trim().length > 0) return derived;
  const input = `${industry} ${url}`.toLowerCase();
  for (const row of IMAGE_KEYWORD_MAP) if (row.match.some(m => input.includes(m))) return row.keyword;
  return industry || 'ecommerce';
}
function escSVG(s){return String(s||'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;')}
function estWidth(text, fs){return (String(text||'').length||1)*fs*0.56}
function fitFont(text, maxW, startFs, minFs=30){let fs=startFs;while(fs>minFs&&estWidth(text,fs)>maxW)fs-=2;return fs}
function splitTwoLines(text,maxW,startFs){
  const words=String(text||'').split(/\s+/).filter(Boolean);
  if(words.length<=2)return{lines:[text],fs:fitFont(text,maxW,startFs)};
  for(let cut=Math.ceil(words.length/2);cut<words.length-1;cut++){
    const a=words.slice(0,cut).join(' '),b=words.slice(cut).join(' ');
    let fs=startFs;fs=Math.min(fitFont(a,maxW,fs),fitFont(b,maxW,fs));
    if(estWidth(a,fs)<=maxW && estWidth(b,fs)<=maxW) return {lines:[a,b],fs};
  }
  return {lines:[text],fs:fitFont(text,maxW,startFs)};
}
const BANNED_TERMS = /\b(unisex|global|vibes?|forward|finds?|chic|bespoke|avant|couture)\b/i;
function cleanHeadline(h){
  h=String(h||'').replace(/[^a-z0-9 &\-]/gi,' ').replace(/\s+/g,' ').trim();
  if(!h || BANNED_TERMS.test(h)) return '';
  const words=h.split(' '); if(words.length<2||words.length>4) return '';
  return h.toUpperCase();
}
function cleanCTA(c){
  c=String(c||'').replace(/[^a-z0-9 &\-]/gi,' ').replace(/\s+/g,' ').trim();
  if(!c) return 'Shop Now!';
  let w=c.split(' ').slice(0,3).join(' ');
  if(!/[.!?]$/.test(w)) w+='!';
  return w.charAt(0).toUpperCase()+w.slice(1);
}
const FALLBACK_HEADLINES = ['New Arrivals','Everyday Style','Modern Looks','Wardrobe Refresh','Great Picks Today','Everyday Essentials'];
const FALLBACK_CTA = ['Shop Now!','See More!','Learn More!'];

function renderImageSVG({ W, H, base64, headline, cta, tpl=1 }) {
  const ACCENT = '#14e7b9', LIGHT = '#f2f5f6'; const MAX_W = W - 80;
  if (tpl === 1) {
    let fs = fitFont(headline, MAX_W-80, 56);
    return `<svg width="${W}" height="${H}" xmlns="http://www.w3.org/2000/svg">
      <defs><linearGradient id="g1" x1="0" y1="0" x2="0" y2="1"><stop offset="0%" stop-color="#0000"/><stop offset="100%" stop-color="#000a"/></linearGradient></defs>
      <image href="data:image/jpeg;base64,${base64}" x="0" y="0" width="${W}" height="${H}"/>
      <rect x="0" y="${H-140}" width="${W}" height="140" fill="url(#g1)"/>
      <text x="40" y="${H-56}" font-family="Times New Roman, Times, serif" font-size="${fs}" font-weight="700" fill="${LIGHT}" letter-spacing="2">${escSVG(headline)}</text>
      <text x="${W-40}" y="${H-52}" text-anchor="end" font-family="Helvetica, Arial, sans-serif" font-size="26" font-weight="800" fill="${ACCENT}" text-decoration="underline">${escSVG(cta)}</text>
    </svg>`;
  }
  if (tpl === 2) {
    let fs = fitFont(headline, MAX_W-80, 56);
    return `<svg width="${W}" height="${H}" xmlns="http://www.w3.org/2000/svg">
      <defs><linearGradient id="g2" x1="0" y1="0" x2="0" y2="1"><stop offset="0%" stop-color="#000a"/><stop offset="100%" stop-color="#0000"/></linearGradient></defs>
      <image href="data:image/jpeg;base64,${base64}" x="0" y="0" width="${W}" height="${H}"/>
      <rect x="0" y="0" width="${W}" height="140" fill="url(#g2)"/>
      <text x="40" y="92" font-family="Times New Roman, Times, serif" font-size="${fs}" font-weight="700" fill="#f2f5f6" letter-spacing="2">${escSVG(headline)}</text>
      <text x="${W-40}" y="98" text-anchor="end" font-family="Helvetica, Arial, sans-serif" font-size="26" font-weight="800" fill="#14e7b9" text-decoration="underline">${escSVG(cta)}</text>
    </svg>`;
  }
  if (tpl === 3) {
    const boxW = 860; const fit = splitTwoLines(headline, boxW-80, 56); const y0 = (H/2) - (fit.lines.length===2?12:0);
    return `<svg width="${W}" height="${H}" xmlns="http://www.w3.org/2000/svg">
      <image href="data:image/jpeg;base64,${base64}" x="0" y="0" width="${W}" height="${H}"/>
      <rect x="${(W-boxW)/2}" y="${(H-160)/2}" width="${boxW}" height="160" rx="20" fill="#00000028"/>
      <text x="${W/2}" y="${y0}" text-anchor="middle" font-family="Times New Roman, Times, serif" font-size="${fit.fs}" font-weight="700" fill="#f2f5f6" letter-spacing="2">
        <tspan x="${W/2}" dy="0">${escSVG(fit.lines[0])}</tspan>
        ${fit.lines[1]?`<tspan x="${W/2}" dy="${fit.fs*1.05}">${escSVG(fit.lines[1])}</tspan>`:''}
      </text>
      <text x="${W/2}" y="${H/2+50}" text-anchor="middle" font-family="Helvetica, Arial, sans-serif" font-size="26" font-weight="800" fill="#14e7b9" text-decoration="underline">${escSVG(cta)}</text>
    </svg>`;
  }
  const targetFs = 56;
  const fit = splitTwoLines(headline, W*0.6, targetFs);
  const needed = Math.min(W*0.7, Math.max(360, Math.max(...fit.lines.map(line => estWidth(line, fit.fs))) + 140));
  const leftPad = 28;
  const topY = H/2 - (fit.lines.length === 2 ? fit.fs*0.6 : fit.fs*0.2);
  return `<svg width="${W}" height="${H}" xmlns="http://www.w3.org/2000/svg">
    <image href="data:image/jpeg;base64,${base64}" x="0" y="0" width="${W}" height="${H}"/>
    <rect x="0" y="0" width="${needed}" height="${H}" fill="#0b0d10aa"/>
    <text x="${leftPad+12}" y="${topY}" font-family="Times New Roman, Times, serif" font-size="${fit.fs}" font-weight="700" fill="#f2f5f6" letter-spacing="2">
      <tspan x="${leftPad+12}" dy="0">${escSVG(fit.lines[0])}</tspan>
      ${fit.lines[1]?`<tspan x="${leftPad+12}" dy="${fit.fs*1.05}">${escSVG(fit.lines[1])}</tspan>`:''}
    </text>
    <text x="${leftPad+12}" y="${topY + (fit.lines.length===2 ? fit.fs*2.1 : fit.fs*1.4)}" font-family="Helvetica, Arial, sans-serif" font-size="26" font-weight="800" fill="#14e7b9" text-decoration="underline">${escSVG(cta)}</text>
  </svg>`;
}

async function buildOverlayImage({ imageUrl, headlineHint = '', ctaHint = '', seed = '' }) {
  const W = 1200, H = 627;
  const imgRes = await axios.get(imageUrl, { responseType: 'arraybuffer' });
  const baseBuf = await sharp(imgRes.data).resize(W, H, { fit: 'cover' }).jpeg({ quality: 92 }).toBuffer();
  const base64 = baseBuf.toString('base64');

  let headline = cleanHeadline(headlineHint) || (FALLBACK_HEADLINES[Math.floor(Math.random()*FALLBACK_HEADLINES.length)]).toUpperCase();
  let cta = cleanCTA(ctaHint) || FALLBACK_CTA[0];

  let h = 0; for (const c of String(seed || Date.now())) h = (h*31 + c.charCodeAt(0))>>>0;
  const tpl = (h % 4) + 1;

  const svg = renderImageSVG({ W, H, base64, headline, cta, tpl });

  const outDir = ensureGeneratedDir();
  const file = `${uuidv4()}.jpg`;
  const outPath = path.join(outDir, file);
  fs.writeFileSync(outPath, await sharp(Buffer.from(svg)).jpeg({ quality: 95 }).toBuffer());
  return { publicUrl: `/generated/${file}`, absoluteUrl: absolutePublicUrl(`/generated/${file}`) };
}

// ---------- music ----------
function findMusicDir() {
  const candidates = [
    path.join(__dirname, '..', 'Music', 'music'),
    path.join(__dirname, '..', 'music', 'music'),
    path.join(__dirname, '..', 'Music'),
    path.join(__dirname, '..', 'music')
  ];
  for (const p of candidates) { try { if (fs.existsSync(p) && fs.statSync(p).isDirectory()) return p; } catch {} }
  return null;
}
function pickMusicFile(keywords = []) {
  const base = findMusicDir();
  if (!base) return null;
  const files = fs.readdirSync(base).filter(f => /\.mp3$/i.test(f));
  if (!files.length) return null;
  const lower = files.map(f => f.toLowerCase());
  for (const kw of keywords.map(x => String(x).toLowerCase())) {
    let i = lower.findIndex(f => f === `${kw}.mp3`); if (i !== -1) return path.join(base, files[i]);
    i = lower.findIndex(f => f.includes(kw)); if (i !== -1) return path.join(base, files[i]);
  }
  return path.join(base, files[0]);
}

// ---------- utils ----------
function withTimeout(p, ms, msg='Timeout') { return Promise.race([p, new Promise((_,rej)=>setTimeout(()=>rej(new Error(msg)), ms))]); }
async function downloadFileWithTimeout(url, dest, timeoutMs=30000, maxSizeMB=5) {
  return new Promise((resolve, reject) => {
    if (!url || !/^https?:\/\//i.test(String(url))) return reject(new Error('Invalid clip URL'));
    const writer = fs.createWriteStream(dest);
    let timedOut = false;
    const timeout = setTimeout(()=>{timedOut=true;writer.close();try{fs.unlinkSync(dest);}catch{};reject(new Error('Download timed out'));}, timeoutMs);
    axios({ url, method:'GET', responseType:'stream' })
      .then(resp => {
        let bytes=0;
        resp.data.on('data', ch => { bytes+=ch.length; if (bytes > maxSizeMB*1024*1024 && !timedOut) { timedOut=true; writer.close(); try{fs.unlinkSync(dest);}catch{}; clearTimeout(timeout); reject(new Error('File too large')); }});
        resp.data.pipe(writer);
        writer.on('finish', ()=>{clearTimeout(timeout); if (!timedOut) resolve(dest);});
        writer.on('error', err=>{clearTimeout(timeout); try{fs.unlinkSync(dest);}catch{}; if (!timedOut) reject(err);});
      })
      .catch(err=>{clearTimeout(timeout); try{fs.unlinkSync(dest);}catch{}; reject(err);});
  });
}
function getDeterministicShuffle(arr, seed) {
  const rng = seedrandom(String(seed || Date.now()));
  const a = [...arr];
  for (let i=a.length-1;i>0;i--){const j=Math.floor(rng()*(i+1));[a[i],a[j]]=[a[j],a[i]];}
  return a;
}
function safeFFText(t){
  return String(t||'')
    .replace(/[\n\r]/g,' ')
    .replace(/[:]/g,' ')
    .replace(/[\\'"]/g,'')
    .replace(/(?:https?:\/\/)?(?:www\.)?[a-z0-9\-]+\.[a-z]{2,}(?:\/\S*)?/gi,'')
    .replace(/\b(dot|com|net|org|io|co)\b/gi,'')
    .replace(/[^A-Za-z0-9 !?\-]/g,' ')
    .replace(/\s+/g,' ')
    .trim()
    .toUpperCase()
    .slice(0, 36);
}
function simpleCTA(input) {
  const t = String(input || '').toLowerCase();
  if (t.includes('buy')) return 'BUY NOW!';
  if (t.includes('shop')) return 'SHOP NOW!';
  if (t.includes('order')) return 'ORDER NOW!';
  if (t.includes('join')) return 'JOIN NOW!';
  if (t.includes('sign')) return 'SIGN UP!';
  if (t.includes('book')) return 'BOOK NOW!';
  if (t.includes('learn')) return 'LEARN MORE!';
  return 'SHOP NOW!';
}

// ---------- VIDEO (modern, 2 variants, no subtitles) ----------
router.post('/generate-video-ad', async (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  try {
    const { url = '', answers = {}, regenerateToken = '', variant = null } = req.body;

    const token = getUserToken(req);
    const fbAdAccountId =
      req.body.fbAdAccountId ||
      req.query.adAccountId ||
      req.headers['x-fb-ad-account-id'] ||
      null;

    const VIDEO = { W: 640, H: 360, FPS: 24, CLIP: 5 };
    const TO = {
      PEXELS: 30000, DL: 45000, SCALE: 45000, CONCAT: 30000,
      TRIM: 20000, OVERMUX: 90000, FPROBE: 8000
    };

    // --- force topical relevance for stock search
    const topic = deriveTopicKeywords(answers, url, answers.industry || 'shopping') || 'shopping';

    const ctaText = simpleCTA(answers?.cta);

    // ----- fetch stock clips -----
    let clips = [];
    try {
      const r = await withTimeout(
        axios.get('https://api.pexels.com/videos/search', {
          headers: { Authorization: PEXELS_API_KEY },
          params: { query: topic, per_page: 70, cb: Date.now() + (regenerateToken || '') }
        }),
        TO.PEXELS,
        'Pexels API timed out'
      );
      clips = r.data.videos || [];
    } catch (e) {
      console.error('Pexels vid fetch failed', e?.response?.data || e.message);
      return res.status(500).json({ error: 'Stock video fetch failed', detail: e.message });
    }
    if (!clips?.length) return res.status(404).json({ error: 'No stock videos found' });

    let candidates = [];
    for (const v of clips) {
      const files = (v.video_files || [])
        .filter(f => f?.link && /\.mp4(\?|$)/i.test(f.link))
        .sort((a, b) => (a.width || 9999) - (b.width || 9999));
      const best = files.find(f => f.quality === 'sd') || files[0];
      if (best?.link) candidates.push(best.link);
    }
    candidates = Array.from(new Set(candidates));
    if (candidates.length < 3) return res.status(404).json({ error: 'Not enough usable clips' });

    const shuffled = getDeterministicShuffle(
      candidates,
      regenerateToken || answers?.businessName || topic || Date.now()
    );

    // work dir
    const tmp = path.join(__dirname, '../tmp');
    if (!fs.existsSync(tmp)) fs.mkdirSync(tmp, { recursive: true });

    // download + scale
    const paths = [];
    let p = 0;
    while (paths.length < 3 && p < shuffled.length) {
      const src = shuffled[p++];
      const raw = path.join(tmp, `${uuidv4()}.mp4`);
      try {
        await withTimeout(downloadFileWithTimeout(src, raw, TO.DL, 6), TO.DL + 2000, 'download timeout');
        const scaled = raw.replace('.mp4', '_s.mp4');
        await withTimeout(
          exec(
            `ffmpeg -y -i "${raw}" ` +
            `-vf "scale=${VIDEO.W}:${VIDEO.H}:force_original_aspect_ratio=decrease,` +
            `pad=${VIDEO.W}:${VIDEO.H}:(ow-iw)/2:(oh-ih)/2,setsar=1,format=yuv420p,fps=${VIDEO.FPS}" ` +
            `-t ${VIDEO.CLIP} -r ${VIDEO.FPS} -c:v libx264 -preset veryfast -crf 22 -an "${scaled}"`
          ),
          TO.SCALE,
          'scale timeout'
        );
        try { fs.unlinkSync(raw); } catch {}
        paths.push(scaled);
      } catch (e) { try { fs.unlinkSync(raw); } catch {} }
    }
    if (!paths.length) return res.status(500).json({ error: 'Video preparation failed' });

    // ----- script (no domains) -----
    let prompt =
      `Write a simple, clear spoken ad script for an online store.\n` +
      `Target ~15 seconds at normal speaking pace (~60–75 words). Avoid fancy terms; do NOT mention a website or domain.\n` +
      `End with this exact CTA: '${ctaText}'. ONLY the spoken words.\n` +
      `Topic keywords (guide only): ${topic}`;
    if (answers?.industry) prompt += `\nCategory: ${answers.industry}`;
    if (answers?.businessName) prompt += `\nBrand: ${answers.businessName}`;
    if (url) prompt += `\nWebsite (for context only, do not say it): ${url}`;

    let script = 'Discover what you love today. Shop now!';
    try {
      const r = await withTimeout(
        openai.chat.completions.create({
          model: 'gpt-4o',
          messages: [{ role: 'user', content: prompt }],
          max_tokens: 150,
          temperature: 0.4
        }),
        15000,
        'OpenAI timeout'
      );
      script = (r.choices?.[0]?.message?.content?.trim() || script)
        .replace(/\s+/g, ' ')
        .replace(/(?:https?:\/\/)?(?:www\.)?[a-z0-9\-]+\.[a-z]{2,}(?:\/\S*)?/gi, '')
        .replace(/\b(dot|com|net|org|io|co)\b/gi, '')
        .replace(/\s{2,}/g, ' ')
        .trim();
    } catch {}

    // ----- TTS (voiceover) -----
    const ttsPath = path.join(tmp, `${uuidv4()}.mp3`);
    try {
      const ttsRes = await withTimeout(
        openai.audio.speech.create({ model: 'tts-1', voice: 'alloy', input: script }),
        20000,
        'TTS timeout'
      );
      fs.writeFileSync(ttsPath, Buffer.from(await ttsRes.arrayBuffer()));
    } catch (e) {
      console.error('TTS failed', e);
      return res.status(500).json({ error: 'TTS generation failed', detail: e.message });
    }

    // ----- durations -----
    async function probeDur(file) {
      try {
        const { stdout } = await withTimeout(
          exec(`ffprobe -v error -show_entries format=duration -of default=nokey=1:noprint_wrappers=1 "${file}"`),
          TO.FPROBE,
          'ffprobe timeout'
        );
        const s = parseFloat(stdout.trim());
        return isNaN(s) ? 0 : s;
      } catch { return 0; }
    }
    let voDur = await probeDur(ttsPath);
    if (voDur <= 0) voDur = 12.0;
    const finalDur = Math.max(15.0, Math.min(voDur, 30.0)); // never under 15s

    // ----- concat cuts -----
    const need = Math.max(1, Math.ceil(finalDur / VIDEO.CLIP));
    while (paths.length < need) paths.push(paths[paths.length - 1]);
    const listPath = path.join(tmp, `${uuidv4()}.txt`);
    fs.writeFileSync(listPath, paths.slice(0, need).map(pth => `file '${pth}'`).join('\n'));

    const outDir = ensureGeneratedDir();
    const id = uuidv4();
    const concatPath = path.join(outDir, `${id}.concat.mp4`);
    const trimmedPath = path.join(outDir, `${id}.trim.mp4`);
    const outPath = path.join(outDir, `${id}.mp4`);

    await withTimeout(
      exec(`ffmpeg -y -f concat -safe 0 -i "${listPath}" -c copy "${concatPath}"`),
      TO.CONCAT,
      'concat timeout'
    );
    await withTimeout(
      exec(`ffmpeg -y -i "${concatPath}" -t ${finalDur.toFixed(2)} -c copy "${trimmedPath}"`),
      TO.TRIM,
      'trim timeout'
    );

    // ----- modern overlays (no subs) -----
    const serifFont = '/usr/share/fonts/truetype/dejavu/DejaVuSerif-Bold.ttf';
    const sansFont  = '/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf';
    const chosen = fs.existsSync(serifFont) ? serifFont : (fs.existsSync(sansFont) ? sansFont : null);
    const fontParam = chosen ? `fontfile='${chosen}':` : ''; // Fontconfig warning may appear but is harmless.

    const brandLine = safeFFText(answers?.businessName || topic || 'JUST DROPPED');
    const ctaTxt    = safeFFText(ctaText);

    // Base grading + vignette
    const baseVideoChain =
      `scale=${VIDEO.W}:${VIDEO.H}:force_original_aspect_ratio=decrease,` +
      `pad=${VIDEO.W}:${VIDEO.H}:(ow-iw)/2:(oh-ih)/2,` +
      `setsar=1,format=yuv420p,fps=${VIDEO.FPS},` +
      `eq=contrast=1.08:saturation=1.15:brightness=0.02,` +
      `unsharp=3:3:0.5:3:3:0.0,` +
      `vignette=PI/6:0.5`;

    // Variant chooser (1 = lower third intro, 2 = top bar intro)
    let styleVariant = Number(variant);
    if (![1,2].includes(styleVariant)) {
      let h = 0; for (const c of String(regenerateToken || answers?.businessName || Date.now())) h = (h * 31 + c.charCodeAt(0)) >>> 0;
      styleVariant = (h % 2) + 1;
    }

    // Timings
    const introStart = 0.40, introEnd = Math.min(4.2, Math.max(2.2, finalDur * 0.25));
    const outroStart = Math.max(0.0, finalDur - 2.8);
    const outroEnd   = finalDur;

    // Build overlay chain per variant (FIX: use iw/ih; never w=w/h=h)
    let overlayChain;
    if (styleVariant === 1) {
      // Lower-third intro band + end CTA badge
      const boxIntro  = `drawbox=x=0:y=ih-120:w=iw:h=120:color=black@0.55:t=fill:enable='between(t,${introStart},${introEnd})'`;
      const txtIntro1 = `drawtext=${fontParam}text='${brandLine}':fontcolor=white@0.98:fontsize=32:x=40:y=h-88:enable='between(t,${(introStart+0.2).toFixed(2)},${introEnd})'`;
      const txtIntro2 = `drawtext=${fontParam}text='${ctaTxt}':fontcolor=white@0.99:fontsize=26:box=1:boxcolor=0x14e7b9@0.85:boxborderw=16:x=w-tw-40:y=h-90:enable='between(t,${(introStart+0.5).toFixed(2)},${introEnd})'`;

      const boxOutro  = `drawbox=x=0:y=0:w=iw:h=ih:color=black@0.28:t=fill:enable='between(t,${outroStart},${outroEnd})'`;
      const txtOutro1 = `drawtext=${fontParam}text='${brandLine}':fontcolor=white@0.98:fontsize=34:x=(w-tw)/2:y=(h/2-30):enable='between(t,${outroStart},${outroEnd})'`;
      const txtOutro2 = `drawtext=${fontParam}text='${ctaTxt}':fontcolor=white@0.99:fontsize=38:box=1:boxcolor=0x0b0d10@0.75:boxborderw=20:x=(w-tw)/2:y=(h/2+12):enable='between(t,${outroStart},${outroEnd})'`;
      overlayChain = [baseVideoChain, boxIntro, txtIntro1, txtIntro2, boxOutro, txtOutro1, txtOutro2].join(',');
    } else {
      // Top-bar intro strip + full-bleed dim end card
      const boxIntro  = `drawbox=x=0:y=0:w=iw:h=96:color=black@0.50:t=fill:enable='between(t,${introStart},${introEnd})'`;
      const txtIntro1 = `drawtext=${fontParam}text='${brandLine}':fontcolor=white@0.98:fontsize=30:x=40:y=30:enable='between(t,${(introStart+0.15).toFixed(2)},${introEnd})'`;
      const txtIntro2 = `drawtext=${fontParam}text='${ctaTxt}':fontcolor=white@0.99:fontsize=24:box=1:boxcolor=0x14e7b9@0.85:boxborderw=12:x=w-tw-40:y=30:enable='between(t,${(introStart+0.45).toFixed(2)},${introEnd})'`;

      const boxOutro  = `drawbox=x=0:y=0:w=iw:h=ih:color=black@0.35:t=fill:enable='between(t,${outroStart},${outroEnd})'`;
      const txtOutro1 = `drawtext=${fontParam}text='${ctaTxt}':fontcolor=white@0.99:fontsize=42:box=1:boxcolor=0x0b0d10@0.75:boxborderw=24:x=(w-tw)/2:y=(h/2-10):enable='between(t,${outroStart},${outroEnd})'`;
      overlayChain = [baseVideoChain, boxIntro, txtIntro1, txtIntro2, boxOutro, txtOutro1].join(',');
    }

    // ----- audio: VO + optional BG music (robust to mono VO) -----
    let bgMusicPath = null;
    try {
      const bgKeywords = [];
      if (answers?.industry) bgKeywords.push(answers.industry);
      if (answers?.businessName) bgKeywords.push(answers.businessName);
      bgMusicPath = pickMusicFile(bgKeywords);
    } catch {}

    const musicInput = bgMusicPath ? ` -i "${bgMusicPath}"` : '';
    let filterComplex, mapArgs;
    if (bgMusicPath) {
      filterComplex =
        `[0:v]${overlayChain}[v];` +
        `[1:a]aresample=44100,pan=stereo|c0=c0|c1=c0,volume=1.0,atrim=0:${finalDur.toFixed(2)},apad=pad_dur=${finalDur.toFixed(2)}[voice];` +
        `[2:a]aresample=44100,volume=0.20,atrim=0:${finalDur.toFixed(2)},apad=pad_dur=${finalDur.toFixed(2)}[bg];` +
        `[voice][bg]amix=inputs=2:duration=first:normalize=1[mix]`;
      mapArgs = `-map "[v]" -map "[mix]"`;
    } else {
      filterComplex =
        `[0:v]${overlayChain}[v];` +
        `[1:a]aresample=44100,pan=stereo|c0=c0|c1=c0,atrim=0:${finalDur.toFixed(2)},apad=pad_dur=${finalDur.toFixed(2)}[mix]`;
      mapArgs = `-map "[v]" -map "[mix]"`;
    }

    await withTimeout(
      exec(
        `ffmpeg -y -i "${trimmedPath}" -i "${ttsPath}"${musicInput} ` +
        `-filter_complex "${filterComplex}" ${mapArgs} ` +
        `-t ${finalDur.toFixed(2)} ` +
        `-c:v libx264 -preset veryfast -crf 22 -r ${VIDEO.FPS} -pix_fmt yuv420p ` +
        `-c:a aac -b:a 192k -ar 44100 -movflags +faststart "${outPath}"`
      ),
      TO.OVERMUX,
      'overlay+mux timeout'
    );

    // ensure ready
    let ok = false;
    for (let i = 0; i < 40; i++) {
      try { if (fs.statSync(outPath).size > 200000) { ok = true; break; } } catch {}
      await new Promise(r => setTimeout(r, 200));
    }
    if (!ok) return res.status(500).json({ error: 'Video output not ready' });

    // cleanup
    [concatPath, trimmedPath, ...paths, listPath].forEach(pth => { try { fs.unlinkSync(pth); } catch {} });
    try { fs.unlinkSync(ttsPath); } catch {}

    const publicVideoUrl = `/generated/${id}.mp4`;
    const absoluteUrl = absolutePublicUrl(publicVideoUrl);

    // optional FB upload
    let fbVideoId = null;
    try {
      if (fbAdAccountId && token) {
        const up = await uploadVideoToAdAccount(
          fbAdAccountId,
          token,
          absoluteUrl,
          'SmartMark Generated Video',
          'Generated by SmartMark'
        );
        fbVideoId = up?.id || null;
      }
    } catch (e) {
      console.error('FB upload fail:', e?.response?.data || e.message);
    }

    return res.json({
      videoUrl: publicVideoUrl,
      absoluteVideoUrl: absoluteUrl,
      fbVideoId,
      variant: styleVariant,
      script,
      ctaText,
      voice: 'alloy',
      video: { url: publicVideoUrl, script, overlayText: ctaText, voice: 'alloy', variant: styleVariant }
    });
  } catch (err) {
    console.error('video route error:', err);
    if (!res.headersSent)
      return res.status(500).json({ error: 'Failed to generate video ad', detail: err?.message || 'Unknown error' });
  }
});

// ---------- IMAGE: fetch + overlay ----------
router.post('/generate-image-from-prompt', async (req, res) => {
  try {
    const { regenerateToken = '' } = req.body || {};
    const top = req.body || {};
    const answers = top.answers || top;
    const url = answers.url || top.url || '';
    const industry = answers.industry || top.industry || '';

    const keyword = getImageKeyword(industry, url, answers);

    let photos = [];
    try {
      const r = await axios.get(PEXELS_IMG_BASE, {
        headers: { Authorization: PEXELS_API_KEY },
        params: { query: keyword, per_page: 100, cb: Date.now() + (regenerateToken || '') },
        timeout: 4800
      });
      photos = r.data.photos || [];
    } catch (e) {
      console.error('Pexels img fetch error:', e?.message || e);
      return res.status(500).json({ error: 'Image search failed' });
    }
    if (!photos.length) return res.status(404).json({ error: 'No images found.' });

    const seed = regenerateToken || answers?.businessName || keyword || Date.now();
    let idxHash = 0; for (const c of String(seed)) idxHash = (idxHash*31 + c.charCodeAt(0))>>>0;
    const idx = (idxHash % photos.length);

    const img = photos[idx];
    const baseUrl = img.src.large2x || img.src.original || img.src.large;

    // Try to overlay immediately so caller gets a /generated/* URL.
    let finalUrl = baseUrl;
    try {
      const headlineHint = answers?.businessName ? `${answers.businessName}` : (industry ? 'New Arrivals' : 'Great Picks');
      const ctaHint = answers?.cta || 'Shop Now!';
      const { publicUrl } = await buildOverlayImage({ imageUrl: baseUrl, headlineHint, ctaHint, seed });
      finalUrl = publicUrl;
    } catch (e) {
      console.warn('Overlay build fail; using base image:', e.message);
    }

    res.json({ imageUrl: finalUrl, photographer: img.photographer, pexelsUrl: img.url, keyword, totalResults: photos.length, usedIndex: idx });
  } catch (e) {
    console.error('image route fail:', e?.message || e);
    res.status(500).json({ error: 'Failed to fetch stock image', detail: e.message });
  }
});

// ---------- IMAGE: overlay specific URL ----------
router.post('/generate-image-with-overlay', async (req, res) => {
  try {
    const { imageUrl, answers = {}, regenerateToken = '' } = req.body || {};
    if (!imageUrl) return res.status(400).json({ error: 'Missing imageUrl' });

    const headlineHint = answers?.businessName ? `${answers.businessName}` : (answers?.industry ? 'New Arrivals' : 'Great Picks');
    const ctaHint = answers?.cta || 'Shop Now!';

    const { publicUrl, absoluteUrl } = await buildOverlayImage({
      imageUrl,
      headlineHint,
      ctaHint,
      seed: regenerateToken || answers?.businessName || Date.now()
    });

    res.json({ imageUrl: publicUrl, absoluteUrl });
  } catch (e) {
    console.error('image overlay fail:', e?.message || e);
    const original = /^https?:\/\//i.test(String(req.body?.imageUrl || ''))
      ? req.body.imageUrl
      : absolutePublicUrl(String(req.body?.imageUrl || ''));
    res.json({ imageUrl: original, absoluteUrl: original, warning: 'Overlay failed; returned original image' });
  }
});

module.exports = router;
