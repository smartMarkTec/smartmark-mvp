// [server/routes/ai.js] — SmartMark (FB-style static creatives improved, robust media, CORS hardened)
'use strict';

const express = require('express');
const router = express.Router();

/* ------------------------ CORS (hardened everywhere) ------------------------ */
const FRONTEND_DEFAULT = 'https://smartmark-mvp.vercel.app';
const FRONTEND_ORIGIN = (process.env.FRONTEND_ORIGIN || FRONTEND_DEFAULT).replace(/\/+$/,'');
const ALLOW_ORIGINS = new Set([
  'http://localhost:3000',
  'http://127.0.0.1:3000',
  FRONTEND_ORIGIN,
].filter(Boolean));

function setCors(res, origin) {
  if (origin && ALLOW_ORIGINS.has(origin)) {
    res.setHeader('Access-Control-Allow-Origin', origin);
    res.setHeader('Access-Control-Allow-Credentials', 'true');
  } else {
    res.setHeader('Access-Control-Allow-Origin', FRONTEND_ORIGIN);
  }
  res.setHeader('Vary', 'Origin');
  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,PUT,PATCH,DELETE,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, X-FB-AD-ACCOUNT-ID, X-SM-SID');
  res.setHeader('Access-Control-Max-Age', '86400');
}

router.use((req, res, next) => {
  setCors(res, req.headers.origin);
  if (req.method === 'OPTIONS') return res.sendStatus(204);
  next();
});

/* ------------- Security & Rate-Limiting ------------- */
const { secureHeaders, basicRateLimit } = require('../middleware/security');
router.use(secureHeaders());
router.use(basicRateLimit({ windowMs: 15 * 60 * 1000, max: 120 }));
const heavyLimiter = basicRateLimit({ windowMs: 60 * 60 * 1000, max: 20 });

/* ------------------------------ Deps ------------------------------ */
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
sharp.cache({ files: 0, items: 64, memory: 20 });
sharp.concurrency(1);

const { v4: uuidv4 } = require('uuid');
const FormData = require('form-data');
const { spawn } = require('child_process');
const seedrandom = require('seedrandom');
const { OpenAI } = require('openai');
const { getFbUserToken } = require('../tokenStore');
const db = require('../db');

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const PEXELS_API_KEY = process.env.PEXELS_API_KEY || '';

/* ---------- Feature toggles ---------- */
const IMAGE_ONLY_MODE =
  String(process.env.IMAGE_ONLY_MODE || '').trim() === '1' ||
  /^true$/i.test(String(process.env.IMAGE_ONLY_MODE || ''));

const DISABLE_VIDEO =
  String(process.env.DISABLE_VIDEO || '').trim() === '1' ||
  /^true$/i.test(String(process.env.DISABLE_VIDEO || ''));

/* -------- Disk guard -------- */
const GEN_DIR = '/tmp/generated';
function ensureGeneratedDir() { try { fs.mkdirSync(GEN_DIR, { recursive: true }); } catch {} return GEN_DIR; }
function dirStats(p) {
  try {
    const files = fs.readdirSync(p).map(f => ({ f, full: path.join(p, f) }))
      .filter(x => fs.existsSync(x.full) && fs.statSync(x.full).isFile())
      .map(x => ({ ...x, st: fs.statSync(x.full) }))
      .sort((a,b) => a.st.mtimeMs - b.st.mtimeMs);
    const bytes = files.reduce((n, x) => n + x.st.size, 0);
    return { files, bytes };
  } catch { return { files: [], bytes: 0 }; }
}
const MAX_TMP_BYTES = Number(process.env.MAX_TMP_BYTES || 300 * 1024 * 1024);
function sweepTmpDirHardCap() {
  ensureGeneratedDir();
  const { files, bytes } = dirStats(GEN_DIR);
  let cur = bytes;
  for (const x of files) {
    if (cur <= MAX_TMP_BYTES) break;
    try { fs.unlinkSync(x.full); } catch {}
    cur -= x.st.size;
  }
}
function sweepTmpByAge(ttlMs) {
  ensureGeneratedDir();
  const now = Date.now();
  for (const f of (fs.readdirSync(GEN_DIR) || [])) {
    const full = path.join(GEN_DIR, f);
    try {
      const st = fs.statSync(full);
      if (st.isFile() && now - st.mtimeMs > ttlMs) fs.unlinkSync(full);
    } catch {}
  }
}
function housekeeping() {
  try {
    sweepTmpByAge(Number(process.env.ASSET_TTL_MS || 6 * 60 * 60 * 1000)); // 6h default to avoid racey purges
    sweepTmpDirHardCap();
  } catch {}
}

/* --------------------------- Helpers --------------------------- */
function publicBase() {
  return process.env.PUBLIC_BASE_URL || process.env.RENDER_EXTERNAL_URL || 'https://smartmark-mvp.onrender.com';
}
function absolutePublicUrl(relativePath) {
  if (!relativePath) return '';
  if (/^https?:\/\//i.test(relativePath)) return relativePath;
  return `${publicBase()}${relativePath}`;
}
function getUserToken(req) {
  const auth = req?.headers?.authorization || '';
  if (auth.startsWith('Bearer ')) return auth.slice(7).trim();
  if (req?.session?.fbUserAccessToken) return req.session.fbUserAccessToken;
  if (req?.body?.userAccessToken) return req.body.userAccessToken;
  return getFbUserToken() || null;
}
async function uploadVideoToAdAccount(adAccountId, userAccessToken, fileUrl, name = 'SmartMark Video', description = 'Generated by SmartMark') {
  const id = String(adAccountId || '').replace(/^act_/, '').replace(/\D/g, '');
  const url = `https://graph.facebook.com/v23.0/act_${id}/advideos`;
  const form = new FormData();
  form.append('file_url', fileUrl);
  form.append('name', name);
  form.append('description', description);
  const resp = await axios.post(url, form, { headers: form.getHeaders(), params: { access_token: userAccessToken } });
  return resp.data;
}

/* --------------------- Health --------------------- */
router.get('/healthz', (req, res) => {
  setCors(res, req.headers.origin);
  res.json({ ok: true, ts: Date.now() });
});

/* --------------------- Media streamer (retry + cache) --------------------- */
router.head('/media/:file', async (req, res) => {
  setCors(res, req.headers.origin);
  const file = String(req.params.file || '').replace(/[^a-zA-Z0-9._-]/g, '');
  const full = path.join(ensureGeneratedDir(), file);
  if (fs.existsSync(full)) {
    res.setHeader('Cache-Control', 'public, max-age=86400, immutable');
    return res.status(200).end();
  }
  return res.status(404).end();
});

router.get('/media/:file', async (req, res) => {
  housekeeping();
  setCors(res, req.headers.origin);
  try {
    const file = String(req.params.file || '').replace(/[^a-zA-Z0-9._-]/g, '');
    const full = path.join(ensureGeneratedDir(), file);

    // warm/race-safe: wait up to 900ms if writer just finished
    let exists = fs.existsSync(full);
    if (!exists) {
      for (let i=0;i<3;i++){ await new Promise(r => setTimeout(r, 300)); if (fs.existsSync(full)) { exists = true; break; } }
    }
    if (!exists) return res.status(404).json({ error: 'Not found' });

    const stat = fs.statSync(full);
    const ext = path.extname(full).toLowerCase();
    const type = ext === '.mp4' ? 'video/mp4'
               : ext === '.jpg' || ext === '.jpeg' ? 'image/jpeg'
               : ext === '.png' ? 'image/png'
               : ext === '.webp' ? 'image/webp'
               : ext === '.srt' ? 'text/plain; charset=utf-8'
               : 'application/octet-stream';

    res.setHeader('Content-Type', type);
    res.setHeader('Accept-Ranges', 'bytes');
    res.setHeader('Access-Control-Expose-Headers', 'Content-Range, Content-Length, Accept-Ranges');
    res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
    res.setHeader('Cache-Control', 'public, max-age=86400, immutable');

    const range = req.headers.range;
    if (range && ext === '.mp4') {
      const m = /bytes=(\d+)-(\d*)/.exec(range);
      const start = m ? parseInt(m[1], 10) : 0;
      const end = m && m[2] ? parseInt(m[2], 10) : stat.size - 1;
      if (start >= stat.size) return res.status(416).set('Content-Range', `bytes */${stat.size}`).end();
      res.status(206);
      res.setHeader('Content-Range', `bytes ${start}-${end}/${stat.size}`);
      res.setHeader('Content-Length', end - start + 1);
      fs.createReadStream(full, { start, end })
        .on('error', () => res.status(500).end())
        .pipe(res);
    } else {
      res.setHeader('Content-Length', stat.size);
      fs.createReadStream(full)
        .on('error', () => res.status(500).end())
        .pipe(res);
    }
  } catch {
    res.status(500).json({ error: 'stream_error' });
  }
});
function mediaPath(relativeFilename) { return `/api/media/${relativeFilename}`; }
function maybeGC() { if (global.gc) { try { global.gc(); } catch {} } }

/* ---------- Persist generated assets ---------- */
const ASSET_TTL_MS = Number(process.env.ASSET_TTL_MS || 6 * 60 * 60 * 1000);
function ownerKeyFromReq(req) {
  const cookieSid = req?.cookies?.sm_sid;
  const headerSid = req?.headers?.['x-sm-sid'];
  const auth = req?.headers?.authorization || '';
  const bearer = auth.startsWith('Bearer ') ? auth.slice(7).trim() : null;
  return cookieSid || headerSid || bearer || `ip:${req.ip}`;
}
async function ensureAssetsTable() {
  await db.read();
  db.data = db.data || {};
  db.data.generated_assets = db.data.generated_assets || [];
  await db.write();
}
async function purgeExpiredAssets() {
  await ensureAssetsTable();
  const now = Date.now();
  const before = db.data.generated_assets.length;
  db.data.generated_assets = db.data.generated_assets.filter(a => (a.expiresAt || 0) > now);
  if (db.data.generated_assets.length !== before) await db.write();
}
async function saveAsset({ req, kind, url, absoluteUrl, meta = {} }) {
  await ensureAssetsTable();
  await purgeExpiredAssets();
  const owner = ownerKeyFromReq(req);
  const now = Date.now();
  const rec = { id: uuidv4(), owner, kind, url, absoluteUrl, meta, createdAt: now, expiresAt: now + ASSET_TTL_MS };
  db.data.generated_assets.push(rec);
  const mine = db.data.generated_assets.filter(a => a.owner === owner).sort((a, b) => b.createdAt - a.createdAt);
  if (mine.length > 50) {
    const keepIds = new Set(mine.slice(0, 50).map(a => a.id));
    db.data.generated_assets = db.data.generated_assets.filter(a => a.owner !== owner || keepIds.has(a.id));
  }
  await db.write();
  housekeeping();
  return rec;
}
async function getRecentImageForOwner(req) {
  await purgeExpiredAssets();
  const owner = ownerKeyFromReq(req);
  const img = (db.data.generated_assets || [])
    .filter(a => a.owner === owner && a.kind === 'image')
    .sort((a,b)=>b.createdAt-a.createdAt)[0];
  return img ? (img.absoluteUrl || absolutePublicUrl(img.url)) : null;
}

/* ---------- Topic/category helpers ---------- */
const IMAGE_KEYWORD_MAP = [
  { match: ['protein','supplement','muscle','fitness','gym','workout'], keyword: 'gym workout' },
  { match: ['clothing','fashion','apparel','accessory','athleisure'], keyword: 'fashion model' },
  { match: ['makeup','cosmetic','skincare'], keyword: 'makeup application' },
  { match: ['hair','shampoo','conditioner','styling'], keyword: 'hair care' },
  { match: ['food','pizza','burger','meal','snack','kitchen'], keyword: 'delicious food' },
  { match: ['baby','kids','toys'], keyword: 'happy children' },
  { match: ['pet','dog','cat'], keyword: 'pet dog cat' },
  { match: ['electronics','phone','laptop','tech','gadget'], keyword: 'tech gadgets' },
  { match: ['home','decor','furniture','bedroom','bath'], keyword: 'modern home' },
  { match: ['coffee','cafe','espresso'], keyword: 'coffee shop' },
];
function getImageKeyword(industry = '', url = '') {
  const input = `${industry} ${url}`.toLowerCase();
  for (const row of IMAGE_KEYWORD_MAP) if (row.match.some(m => input.includes(m))) return row.keyword;
  return industry || 'ecommerce';
}
function deriveTopicKeywords(answers = {}, url = '', fallback = 'shopping') {
  const industry = answers.industry || answers.productType || '';
  const base = getImageKeyword(industry, url) || industry || fallback;
  const extra = String(answers.description || answers.product || answers.mainBenefit || '').toLowerCase();
  if (extra.includes('coffee')) return 'coffee shop';
  if (/(protein|fitness|gym|workout|trainer)/.test(extra)) return 'gym workout';
  if (/(makeup|skincare|cosmetic)/.test(extra)) return 'makeup application';
  if (/hair/.test(extra)) return 'hair care';
  if (/(pet|dog|cat)/.test(extra)) return 'pet dog cat';
  if (/(electronics|phone|laptop)/.test(extra)) return 'tech gadgets';
  return base || fallback;
}
function resolveCategory(answers = {}) {
  const txt = `${answers.industry || ''} ${answers.productType || ''} ${answers.description || ''}`.toLowerCase();
  if (/fashion|apparel|clothing|athleisure|outfit|wardrobe/.test(txt)) return 'fashion';
  if (/fitness|gym|workout|trainer|supplement|protein|yoga|crossfit|wellness/.test(txt)) return 'fitness';
  if (/makeup|cosmetic|skincare|beauty|serum|lipstick|foundation/.test(txt)) return 'cosmetics';
  if (/hair|shampoo|conditioner|styling/.test(txt)) return 'hair';
  if (/food|snack|meal|restaurant|pizza|burger|drink|beverage|kitchen/.test(txt)) return 'food';
  if (/pet|dog|cat|petcare|treats/.test(txt)) return 'pets';
  if (/electronics|phone|laptop|tech|gadget|device|camera/.test(txt)) return 'electronics';
  if (/home|decor|kitchen|furniture|bedroom|bath/.test(txt)) return 'home';
  if (/coffee|café|espresso|latte|roast/.test(txt)) return 'coffee';
  return 'generic';
}
const FASHION_TERMS = /\b(style|styles|outfit|outfits|wardrobe|pieces|fits?|colors?|sizes?)\b/gi;
function stripFashionIfNotApplicable(text, category) {
  if (category === 'fashion') return String(text || '');
  return String(text || '').replace(FASHION_TERMS, () => 'options');
}
function enforceCategoryPresence(text, category) {
  const t = String(text || '');
  const hasAny = (arr) => arr.some(w => new RegExp(`\\b${w}\\b`, 'i').test(t));
  const APPEND = (line) => (t.replace(/\s+/g, ' ').trim().replace(/[.]*\s*$/, '') + '. ' + line).trim();
  const req = {
    cosmetics: ['skin','makeup','beauty','serum','routine'],
    fitness: ['workout','training','gym','strength','wellness'],
    hair: ['hair','shampoo','conditioner','styling'],
    food: ['fresh','flavor','taste','meal','snack'],
    pets: ['pet','dog','cat','treat'],
    electronics: ['tech','device','gadget','performance'],
    home: ['home','kitchen','decor','space'],
    coffee: ['coffee','brew','roast','espresso'],
    fashion: ['style','outfit','fabric','fit'],
    generic: []
  }[category] || [];
  if (!req.length || hasAny(req)) return t;
  const injection = {
    cosmetics: 'Made to fit into your beauty routine.',
    fitness: 'Designed for your workout and training.',
    hair: 'Helps you care for and style your hair.',
    food: 'Made for great taste and an easy experience.',
    pets: 'Made for everyday pet care with less hassle.',
    electronics: 'Built for reliable performance.',
    home: 'A simple way to upgrade your space.',
    coffee: 'Balanced flavor for a better coffee break.',
    fashion: 'Find a look that works for you.',
    generic: 'Easy to use and simple to get started.'
  }[category];
  return APPEND(injection);
}
function cleanFinalText(text) {
  return String(text || '')
    .replace(/\s+/g, ' ')
    .replace(/\.{2,}/g, '.')
    .replace(/\s([.!,?])/g, '$1')
    .replace(/(?:https?:\/\/)?(?:www\.)?[a-z0-9\-]+\.[a-z]{2,}(?:\/\S*)?/gi, '')
    .replace(/\b(dot|com|net|org|io|co)\b/gi, '')
    .trim();
}
function categoryLabelForOverlay(category) {
  return {
    fashion: 'FASHION', fitness: 'TRAINING', cosmetics: 'BEAUTY', hair: 'HAIR CARE',
    food: 'FOOD', pets: 'PET CARE', electronics: 'TECH', home: 'HOME', coffee: 'COFFEE', generic: 'SHOP'
  }[category || 'generic'];
}
function overlayTitleFromAnswers(answers = {}, categoryOrTopic = '') {
  const category = categoryOrTopic && /^(fashion|fitness|cosmetics|hair|food|pets|electronics|home|coffee|generic)$/i.test(categoryOrTopic)
    ? categoryOrTopic.toLowerCase() : null;
  const brand = (answers.businessName || '').trim().toUpperCase();
  if (brand) {
    const label = category ? categoryLabelForOverlay(category) : 'SHOP';
    const words = brand.split(/\s+/);
    return (words.length === 1 ? `${brand} ${label}` : brand).slice(0, 30);
  }
  if (category) return categoryLabelForOverlay(category);
  return (String(categoryOrTopic || 'SHOP')).toUpperCase().slice(0, 24);
}

/* ------------------------ Training context ------------------------ */
const DATA_DIR = path.join(__dirname, '../data');
const ALLOWED_EXT = new Set(['.txt', '.md', '.markdown', '.json']);
const MAX_FILE_MB = 1.5;
const MAX_TOTAL_CHARS = 45_000;
function loadTrainingContext() {
  if (!fs.existsSync(DATA_DIR)) return '';
  const files = fs.readdirSync(DATA_DIR)
    .map(f => path.join(__dirname, '../data', f))
    .filter(full => {
      const ext = path.extname(full).toLowerCase();
      try {
        const st = fs.statSync(full);
        return st.isFile() && ALLOWED_EXT.has(ext) && st.size <= MAX_FILE_MB * 1024 * 1024;
      } catch { return false; }
    });
  let ctx = '';
  for (const f of files) {
    try {
      const ext = path.extname(f).toLowerCase();
      let text = fs.readFileSync(f, 'utf8');
      if (ext === '.json') { try { text = JSON.stringify(JSON.parse(text)); } catch {} }
      if (!text.trim()) continue;
      const block = `\n\n### SOURCE: ${path.basename(f)}\n${text}\n`;
      if (ctx.length + block.length <= MAX_TOTAL_CHARS) ctx += block;
    } catch {}
  }
  return ctx.trim();
}
let customContext = loadTrainingContext();

/* ---------------------------- Scrape ---------------------------- */
router.get('/test', (_req, res) => res.json({ msg: 'AI route is working!' }));
async function getWebsiteText(url) {
  try {
    const clean = String(url || '').trim();
    if (!clean || !/^https?:\/\//i.test(clean)) throw new Error('Invalid URL');
    const { data, headers } = await axios.get(clean, { timeout: 7000, maxRedirects: 3, validateStatus: s => s < 400 });
    if (!headers['content-type']?.includes('text/html')) throw new Error('Not HTML');
    const body = String(data)
      .replace(/<script[\s\S]*?<\/script>/gi, '')
      .replace(/<style[\s\S]*?<\/style>/gi, '')
      .replace(/<[^>]+>/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
    if (body.length < 200 || /cloudflare|access denied|429/i.test(body)) throw new Error('blocked/short');
    return body.slice(0, 3500);
  } catch { return ''; }
}

/* --------------------------- Ad Copy --------------------------- */
router.post('/generate-ad-copy', async (req, res) => {
  const { description = '', businessName = '', url = '', answers = {} } = req.body;
  if (!description && !businessName && !url && !answers?.industry) {
    return res.status(400).json({ error: 'Please provide at least a description.' });
  }
  const category = resolveCategory(answers || {});
  const forbidFashionLine = category === 'fashion' ? '' : `- Do NOT mention clothing terms like styles, fits, colors, sizes, outfits, wardrobe.`;
  let prompt =
`You are an expert direct-response ad copywriter for e-commerce/online businesses.
${customContext ? `TRAINING CONTEXT:\n${customContext}\n\n` : ''}Write only the exact words for a spoken video ad script (about 46–72 words ≈ 15–17 seconds).
- Keep it neutral and accurate; avoid assumptions about shipping, returns, guarantees, or inventory.
- Keep it specific to the industry/category: ${category}.
${forbidFashionLine}
- Hook → value → simple CTA (from: “Shop now”, “Buy now”, “Learn more”, “Visit us”, “Check us out”, “Take a look”, “Get started”).
- Do NOT mention a website or domain.
- Use the CTA phrase exactly once at the very end.
Output ONLY the script text.`;
  if (description) prompt += `\nBusiness Description: ${description}`;
  if (businessName) prompt += `\nBusiness Name: ${businessName}`;
  if (answers?.industry) prompt += `\nIndustry: ${answers.industry}`;
  if (url) prompt += `\nWebsite (for context only): ${url}`;

  try {
    const r = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 220,
      temperature: 0.35
    });
    let script = r.choices?.[0]?.message?.content?.trim() || '';
    script = stripFashionIfNotApplicable(script, category);
    script = enforceCategoryPresence(script, category);
    script = cleanFinalText(script);
    res.json({ adCopy: script });
  } catch {
    res.status(500).json({ error: 'Failed to generate ad copy' });
  }
});

/* ------------------- Campaign assets (headline/body/cta) ------------------- */
router.post('/generate-campaign-assets', async (req, res) => {
  try {
    const { answers = {}, url = '' } = req.body;
    const category = resolveCategory(answers || {});
    const brandFromUrl = (u = '') => {
      try {
        const h = new URL(u).hostname.replace(/^www\./, '');
        const base = h.split('.')[0] || 'Your Brand';
        return base.replace(/[-_]/g, ' ').replace(/\b\w/g, c => c.toUpperCase());
      } catch { return 'Your Brand'; }
    };
    const brand = (answers.businessName && String(answers.businessName).trim()) || brandFromUrl(url);
    const industry = (answers.industry && String(answers.industry).trim()) || '';
    const mainBenefit = (answers.mainBenefit && String(answers.mainBenefit).trim()) || '';
    const offer = (answers.offer && String(answers.offer).trim()) || '';

    let websiteText = '';
    try { if (url && /^https?:\/\//i.test(url)) websiteText = await getWebsiteText(url); } catch {}

    const forbidFashionLine = category === 'fashion' ? '' : `- Do NOT mention clothing terms like styles, fits, colors, sizes, outfits, wardrobe.`;

    const prompt = `
${customContext ? `TRAINING CONTEXT:\n${customContext}\n\n` : ''}You are a senior direct-response copywriter for e-commerce.
Write JSON ONLY:

{
  "headline": "max 55 characters, plain and neutral (no assumptions)",
  "body": "18-30 words, friendly and value-focused, neutral claims only, no emojis/hashtags",
  "image_overlay_text": "4 words max, simple CTA in ALL CAPS"
}

Rules:
- Keep copy specific to the category: ${category}.
${forbidFashionLine}
- Never include a website or domain.
Context:
Brand: ${brand}
Industry: ${industry || '[general ecommerce]'}
Main benefit: ${mainBenefit || '[unspecified]'}
Offer: ${offer || '[none]'}
Website text (may be empty): """${(websiteText || '').slice(0, 1200)}"""`.trim();

    let headline = '', body = '', overlay = '';
    try {
      const r = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 220,
        temperature: 0.35
      });
      const raw = r.choices?.[0]?.message?.content?.trim() || '{}';
      const jsonStr = (raw.match(/\{[\s\S]*\}/) || [raw])[0];
      const parsed = JSON.parse(jsonStr);

      const clean = (s, max = 200) => cleanFinalText(String(s || '')).slice(0, max);
      headline = clean(parsed.headline, 55);
      body = stripFashionIfNotApplicable(clean(parsed.body, 220), category);
      overlay = clean(parsed.image_overlay_text, 28);
    } catch {
      headline = `${brand}: New Products`;
      body = `Explore useful products designed for daily use, with a focus on simplicity and value. See what works best for you.`;
      overlay = 'LEARN MORE';
    }

    headline = headline.replace(/["<>]/g, '').slice(0, 55);
    body = body.replace(/["<>]/g, '').trim();
    overlay = pickFromAllowedCTAs(answers).toUpperCase();

    return res.json({ headline, body, image_overlay_text: overlay });
  } catch {
    return res.json({
      headline: 'New Products Just In',
      body: 'Explore everyday products designed for simplicity and value. See what’s new and find what works for you.',
      image_overlay_text: 'LEARN MORE'
    });
  }
});

/* ---------------------- Static Image overlays (FB look) ---------------------- */
const PEXELS_IMG_BASE = 'https://api.pexels.com/v1/search';

/* --- SVG helpers --- */
function escSVG(s){return String(s||'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;')}
function estWidth(text, fs){return (String(text||'').length||1)*fs*0.56}
function fitFont(text, maxW, startFs, minFs=26){let fs=startFs;while(fs>minFs&&estWidth(text,fs)>maxW)fs-=2;return fs}
function splitTwoLines(text,maxW,startFs){
  const words=String(text||'').split(/\s+/).filter(Boolean);
  if(words.length<=2)return{lines:[text],fs:fitFont(text,maxW,startFs)};
  for(let cut=Math.ceil(words.length/2);cut<words.length-1;cut++){
    const a=words.slice(0,cut).join(' '),b=words.slice(cut).join(' ');
    let fs=startFs;fs=Math.min(fitFont(a,maxW,fs),fitFont(b,maxW,fs));
    if(estWidth(a,fs)<=maxW && estWidth(b,fs)<=maxW) return {lines:[a,b],fs};
  }
  return {lines:[text],fs:fitFont(text,maxW,startFs)};
}
const BANNED_TERMS = /\b(unisex|global|vibes?|forward|finds?|chic|bespoke|avant|couture)\b/i;
function cleanHeadline(h){
  h=String(h||'').replace(/[^a-z0-9 &\-]/gi,' ').replace(/\s+/g,' ').trim();
  if(!h || BANNED_TERMS.test(h)) return '';
  const words=h.split(' ');
  if(words.length>6) h = words.slice(0,6).join(' ');
  return h.toUpperCase();
}
const ALLOWED_CTAS = ['SHOP NOW!', 'BUY NOW!', 'CHECK US OUT!', 'VISIT US!', 'TAKE A LOOK!', 'LEARN MORE!', 'GET STARTED!'];
function pickFromAllowedCTAs(answers = {}, seed = '') {
  const t = String(answers?.cta || '').trim();
  if (t) {
    const norm = t.toUpperCase().replace(/['’]/g,'').replace(/[^A-Z0-9 !?]/g,'').replace(/\s+/g,' ').trim();
    const withBang = /!$/.test(norm) ? norm : `${norm}!`;
    if (ALLOWED_CTAS.includes(withBang)) return withBang;
  }
  let h = 0; for (const c of String(seed || Date.now())) h = (h*31 + c.charCodeAt(0))>>>0;
  return ALLOWED_CTAS[h % ALLOWED_CTAS.length];
}
function cleanCTA(c){
  const norm = String(c||'').toUpperCase().replace(/['’]/g,'').replace(/[^A-Z0-9 !?]/g,'').replace(/\s+/g,' ').trim();
  const withBang = /!$/.test(norm) ? norm : (norm ? `${norm}!` : '');
  return ALLOWED_CTAS.includes(withBang) ? withBang : 'LEARN MORE!';
}
function pickSansFontFile() {
  const candidates = [
    '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',
    '/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf',
    '/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf',
    '/usr/share/fonts/truetype/freefont/FreeSans.ttf',
    '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf'
  ];
  for (const p of candidates) { try { if (fs.existsSync(p)) return p; } catch {} }
  return null;
}

/* --- Placement analysis (avoid faces/subjects) --- */
async function analyzeImageForPlacement(imgBuf) {
  try {
    const W = 160, H = 88;
    const { data } = await sharp(imgBuf).resize(W, H, { fit: 'cover' }).removeAlpha().raw().toBuffer({ resolveWithObject: true });
    const cellX = 8, cellY = 4; const cw = Math.floor(W / cellX), ch = Math.floor(H / cellY);
    const cells = [];
    const lumAt = (x,y) => { const i=(y*W+x)*3, r=data[i], g=data[i+1], b=data[i+2]; return 0.2126*r + 0.7152*g + 0.0722*b; };
    const isSkinish = (r,g,b) => { const max = Math.max(r,g,b), min = Math.min(r,g,b); const diff = max-min; return r>95 && g>40 && b>20 && (r>g) && (r>b) && diff>15 && (Math.abs(r-g)>15); };
    for (let gy=0; gy<cellY; gy++){
      for (let gx=0; gx<cellX; gx++){
        let gradSum=0, skinCount=0, lumSum=0, count=0;
        for (let y=gy*ch; y<Math.min(H,(gy+1)*ch); y++){
          for (let x=gx*cw; x<Math.min(W,(gx+1)*cw); x++){
            const i=(y*W+x)*3, r=data[i], g=data[i+1], b=data[i+2];
            const l = 0.2126*r + 0.7152*g + 0.0722*b;
            lumSum+=l; count++;
            const lR = x+1<W ? lumAt(x+1,y) : l;
            const lD = y+1<H ? lumAt(x,y+1) : l;
            gradSum += Math.abs(l - lR) + Math.abs(l - lD);
            if (isSkinish(r,g,b)) skinCount++;
          }
        }
        const lum = lumSum/(count||1);
        const sal = gradSum/(count||1);
        const skinRatio = skinCount/(count||1);
        cells.push({ gx, gy, sal, skin: skinRatio, lum });
      }
    }
    const salMax = Math.max(...cells.map(c=>c.sal)) || 1;
    const avoidCells = cells.map(c => ({ ...c, avoid: (c.sal/salMax)*0.6 + c.skin*0.4 }));
    const sumWhere = (pred)=>avoidCells.filter(pred).reduce((s,c)=>s+c.avoid,0);
    const leftScore  = sumWhere(c=>c.gx < cellX/2);
    const rightScore = sumWhere(c=>c.gx >= cellX/2);
    const topScore   = sumWhere(c=>c.gy < cellY/2);
    const bottomScore= sumWhere(c=>c.gy >= cellY/2);
    const darkerSide = (leftScore < rightScore) ? 'left' : 'right';
    const darkerBand = (topScore < bottomScore) ? 'top' : 'bottom';
    let rSum=0,gSum=0,bSum=0, tot=W*H;
    for (let i=0;i<tot;i++){ const j=i*3; rSum+=data[j]; gSum+=data[j+1]; bSum+=data[j+2]; }
    const avg = { r:Math.round(rSum/tot), g:Math.round(gSum/tot), b:Math.round(bSum/tot) };
    const palette = ['#E63946','#2B6CB0','#2F855A','#6B46C1','#E98A15','#D61C4E'];
    const idx = ((avg.r>avg.g)+(avg.g>avg.b)*2+(avg.r>avg.b)*3) % palette.length;
    const brandColor = palette[idx];
    const diffLR = Math.abs(leftScore-rightScore);
    return { darkerSide, darkerBand, brandColor, diffLR };
  } catch { return { darkerSide:'left', darkerBand:'top', brandColor:'#E63946', diffLR: 0.0 }; }
}

function overlaySublineFromAnswers(answers = {}) {
  const a = answers || {};
  const pieces = [a.mainBenefit, a.offer, a.description].map(s => String(s||'').trim()).filter(Boolean);
  const raw = (pieces[0] || pieces[1] || '').replace(/[\r\n]+/g,' ').trim();
  const clean = raw.length > 90 ? raw.slice(0, 87) + '…' : raw;
  return clean;
}

function svgDefs(brandColor) {
  return `
    <defs>
      <linearGradient id="gShadeV" x1="0" y1="0" x2="0" y2="1">
        <stop offset="0%" stop-color="#000A"/><stop offset="100%" stop-color="#0000"/>
      </linearGradient>
      <linearGradient id="gShadeHLeft" x1="0" y1="0" x2="1" y2="0">
        <stop offset="0%" stop-color="#000B"/><stop offset="100%" stop-color="#0000"/>
      </linearGradient>
      <linearGradient id="panelGrad" x1="0" y1="0" x2="1" y2="0">
        <stop offset="0%" stop-color="${brandColor}" stop-opacity="0.92"/>
        <stop offset="100%" stop-color="${brandColor}" stop-opacity="0.64"/>
      </linearGradient>
      <linearGradient id="bottomBand" x1="0" y1="0" x2="0" y2="1">
        <stop offset="0%" stop-color="#0000"/><stop offset="100%" stop-color="#000C"/>
      </linearGradient>
      <pattern id="dots" x="0" y="0" width="18" height="18" patternUnits="userSpaceOnUse">
        <circle cx="2.5" cy="2.5" r="1.6" fill="#ffffff22"/>
      </pattern>
    </defs>
  `;
}
const LIGHT = '#f5f7f9';
const MAX_W_TEXT = (W) => W - 140;
const pillBtn = (x, y, text, fs = 28) => {
  fs = Math.max(22, Math.min(fs, 34));
  const w = Math.min(860, estWidth(text, fs) + 50);
  const h = 52; const x0 = x - w / 2;
  return `
    <g transform="translate(${x0}, ${y - Math.floor(h * 0.6)})">
      <rect x="0" y="-14" width="${w}" height="${h}" rx="26" fill="#0b0d10d0"/>
      <text x="${w / 2}" y="12" text-anchor="middle"
            font-family="Inter, Helvetica, Arial, DejaVu Sans, sans-serif"
            font-size="${fs}" font-weight="800" fill="#ffffff" letter-spacing="0.8">
        ${escSVG(text)}
      </text>
    </g>`;
};

/* --- FB-like templates: headline + optional subline, strong bottom band --- */
function svgOverlayCreative({ W, H, headline, tagline = '', cta, prefer='left', preferBand='top', brandColor='#E63946', choose=3 }) {
  const defs = svgDefs(brandColor);
  const safeBottom = Math.round(H * 0.16);
  const fit = splitTwoLines(headline, MAX_W_TEXT(W) - 80, 56);
  const subFs = tagline ? Math.max(18, Math.min(28, 28 - Math.max(0, tagline.length - 64) / 6)) : 0;

  // Template A: bottom band (best for FB static)
  if (choose === 1) {
    const yTitle = H - safeBottom + 48;
    const yCTA = H - 28;
    return `${defs}
      <rect x="0" y="${H-safeBottom}" width="${W}" height="${safeBottom}" fill="url(#bottomBand)"/>
      <text x="${W/2}" y="${yTitle}" text-anchor="middle"
        font-family="Inter, Helvetica, Arial, DejaVu Sans, sans-serif"
        font-size="${fit.fs}" font-weight="900" fill="${LIGHT}" letter-spacing="1.2">
        <tspan x="${W/2}" dy="0">${escSVG(fit.lines[0])}</tspan>
        ${fit.lines[1] ? `<tspan x="${W/2}" dy="${fit.fs * 1.05}">${escSVG(fit.lines[1])}</tspan>` : ''}
      </text>
      ${tagline ? `<text x="${W/2}" y="${yTitle + fit.fs * (fit.lines.length) + 30}" text-anchor="middle"
        font-family="Inter, Helvetica, Arial, DejaVu Sans, sans-serif"
        font-size="${subFs}" font-weight="600" fill="#eaeef3" letter-spacing="0.4">
        ${escSVG(tagline)}
      </text>` : ''}
      ${pillBtn(W/2, yCTA, cta, 28)}`;
  }

  // Template B: vertical color panel (left/right) with dots
  if (choose === 2) {
    const panelW = 460, pad = 34, x0 = prefer === 'left' ? 24 : W - panelW - 24;
    const cx = x0 + pad, textW = panelW - pad*2;
    const fit3 = splitTwoLines(headline, textW, 56);
    const yTitle = 140, yCTA = H - 40;
    return `${defs}
      <rect x="${x0}" y="24" width="${panelW}" height="${H-48}" rx="28" fill="url(#panelGrad)"/>
      <rect x="${x0}" y="24" width="${panelW}" height="${H-48}" rx="28" fill="url(#dots)"/>
      <text x="${cx}" y="${yTitle}" text-anchor="start"
        font-family="Inter, Helvetica, Arial, DejaVu Sans, sans-serif"
        font-size="${fit3.fs}" font-weight="900" fill="#ffffff" letter-spacing="1.1">
        <tspan x="${cx}" dy="0">${escSVG(fit3.lines[0])}</tspan>
        ${fit3.lines[1] ? `<tspan x="${cx}" dy="${fit3.fs * 1.05}">${escSVG(fit3.lines[1])}</tspan>` : ''}
      </text>
      ${tagline ? `<text x="${cx}" y="${yTitle + fit3.fs * (fit3.lines.length) + 28}" text-anchor="start"
         font-family="Inter, Helvetica, Arial, DejaVu Sans, sans-serif"
         font-size="${subFs}" font-weight="600" fill="#f5f7f9" letter-spacing="0.4">${escSVG(tagline)}</text>` : ''}
      ${pillBtn(cx + 160, yCTA, cta, 28)}`;
  }

  // Template C: center box glass
  const boxW = 880, boxPad = 28, gap = tagline ? 16 : 0;
  const fit2 = splitTwoLines(headline, boxW - 2*boxPad - 60, 54);
  const boxH = Math.round(boxPad*2 + fit2.fs*fit2.lines.length + (tagline?subFs+26:0) + 60 + gap);
  const yBox = Math.round((H - boxH) / 2);
  const yTitle = yBox + boxPad + fit2.fs - 6;
  const ySub = yTitle + fit2.fs * (fit2.lines.length) + 26;
  const yCTA = yBox + boxH - boxPad - 12;
  return `${defs}
    <rect x="${(W - boxW) / 2}" y="${yBox}" width="${boxW}" height="${boxH}" rx="28" fill="#00000048" />
    <rect x="${(W - boxW) / 2}" y="${yBox}" width="${boxW}" height="${boxH}" rx="28" fill="#ffffff12" />
    <text x="${W/2}" y="${yTitle}" text-anchor="middle"
      font-family="Inter, Helvetica, Arial, DejaVu Sans, sans-serif"
      font-size="${fit2.fs}" font-weight="900" fill="${LIGHT}" letter-spacing="1.1">
      <tspan x="${W/2}" dy="0">${escSVG(fit2.lines[0])}</tspan>
      ${fit2.lines[1] ? `<tspan x="${W/2}" dy="${fit2.fs * 1.05}">${escSVG(fit2.lines[1])}</tspan>` : ''}
    </text>
    ${tagline ? `<text x="${W/2}" y="${ySub}" text-anchor="middle"
       font-family="Inter, Helvetica, Arial, DejaVu Sans, sans-serif"
       font-size="${subFs}" font-weight="600" fill="#eaeef3" letter-spacing="0.4">${escSVG(tagline)}</text>` : ''}
    ${pillBtn(W/2, yCTA, cta, 28)}`;
}

async function buildOverlayImage({ imageUrl, headlineHint = '', ctaHint = '', tagline = '', seed = '', fallbackHeadline = 'SHOP' }) {
  const W = 1200, H = 628; // FB link ad
  const imgRes = await axios.get(imageUrl, { responseType: 'arraybuffer', timeout: 11000 });
  const analysis = await analyzeImageForPlacement(imgRes.data);
  const base = sharp(imgRes.data).resize(W, H, { fit: 'cover', kernel: sharp.kernel.lanczos3 });
  const headline = cleanHeadline(headlineHint) || cleanHeadline(fallbackHeadline) || 'SHOP';
  const cta = cleanCTA(ctaHint) || 'LEARN MORE!';
  let h = 0; for (const c of String(seed || Date.now())) h = (h * 31 + c.charCodeAt(0)) >>> 0;
  const choices = analysis.diffLR > 40 ? [1,2,3] : [1,3,2];
  const tpl = choices[h % choices.length];

  const overlaySVG = Buffer.from(
    `<svg width="${W}" height="${H}" xmlns="http://www.w3.org/2000/svg">${svgOverlayCreative({
      W, H, headline, tagline, cta, prefer: analysis.darkerSide, preferBand: analysis.darkerBand, brandColor: analysis.brandColor, choose: tpl
    })}</svg>`
  );
  const outDir = ensureGeneratedDir();
  const file = `${uuidv4()}.jpg`;
  await base.composite([{ input: overlaySVG, top: 0, left: 0 }]).jpeg({ quality: 92 }).toFile(path.join(outDir, file));

  // tiny settle to avoid Render 502 race
  await new Promise(r => setTimeout(r, 60));

  maybeGC();
  return { publicUrl: mediaPath(file), absoluteUrl: absolutePublicUrl(mediaPath(file)), filename: file };
}

/* ------------------------------ Music ------------------------------ */
function findMusicDir() {
  const candidates = [
    path.join(__dirname, '..', 'Music', 'music'),
    path.join(__dirname, '..', 'music', 'music'),
    path.join(__dirname, '..', 'Music'),
    path.join(__dirname, '..', 'music')
  ];
  for (const p of candidates) { try { if (fs.existsSync(p) && fs.statSync(p).isDirectory()) return p; } catch {} }
  return null;
}
function pickMusicFile(keywords = []) {
  const base = findMusicDir();
  if (!base) return null;
  const files = fs.readdirSync(base).filter(f => /\.mp3$/i.test(f));
  if (!files.length) return null;
  const lower = files.map(f => f.toLowerCase());
  for (const kw of keywords.map(x => String(x).toLowerCase())) {
    let i = lower.findIndex(f => f === `${kw}.mp3`); if (i !== -1) return path.join(base, files[i]);
    i = lower.findIndex(f => f.includes(kw)); if (i !== -1) return path.join(base, files[i]);
  }
  return path.join(base, files[0]);
}

/* ------------------------------- Utils ------------------------------- */
async function downloadFileWithTimeout(url, dest, timeoutMs=16000, maxSizeMB=15) {
  return new Promise((resolve, reject) => {
    if (!url || !/^https?:\/\//i.test(String(url))) return reject(new Error('Invalid clip URL'));
    const writer = fs.createWriteStream(dest);
    let timedOut = false;
    const timeout = setTimeout(()=>{timedOut=true;writer.destroy();try{fs.unlinkSync(dest);}catch{};reject(new Error('Download timed out'));}, timeoutMs);
    axios({ url, method:'GET', responseType:'stream', timeout: timeoutMs })
      .then(resp => {
        let bytes=0;
        resp.data.on('data', ch => { bytes+=ch.length; if (bytes > maxSizeMB*1024*1024 && !timedOut) { timedOut=true; writer.destroy(); try{fs.unlinkSync(dest);}catch{}; clearTimeout(timeout); reject(new Error('File too large')); }});
        resp.data.on('error', err => { clearTimeout(timeout); if (!timedOut) reject(err); });
        resp.data.pipe(writer);
        writer.on('finish', ()=>{clearTimeout(timeout); if (!timedOut) resolve(dest);});
        writer.on('error', err=>{clearTimeout(timeout); try{fs.unlinkSync(dest);}catch{}; if (!timedOut) reject(err);});
      })
      .catch(err=>{clearTimeout(timeout); try{fs.unlinkSync(dest);}catch{}; reject(err);});
  });
}
function getDeterministicShuffle(arr, seed) {
  const rng = seedrandom(String(seed || Date.now()));
  const a = [...arr];
  for (let i=a.length-1;i>0;i--){const j=Math.floor(rng()*(i+1));[a[i],a[j]]=[a[j],a[i]];}
  return a;
}
function safeFFText(t){
  return String(t||'')
    .replace(/['’]/g,'').replace(/[\n\r]/g,' ').replace(/[:]/g,' ')
    .replace(/[\\"]/g,'').replace(/(?:https?:\/\/)?(?:www\.)?[a-z0-9\-]+\.[a-z]{2,}(?:\/\S*)?/gi,'')
    .replace(/\b(dot|com|net|org|io|co)\b/gi, '').replace(/[^A-Za-z0-9 !?\-]/g,' ')
    .replace(/\s+/g,' ').trim().toUpperCase().slice(0, 40);
}

/* ---- Captions helpers omitted here for brevity in static images path ---- */
/* (Video functions remain intact below) */

function splitForCaptions(text) {
  let parts = String(text||'').trim().replace(/\s+/g,' ')
    .split(/(?<=[.?!])\s+/).filter(Boolean);
  if (parts.length < 3) {
    const more = String(text).split(/,\s+/).filter(s=>s.length>12);
    parts = parts.concat(more).slice(0,5);
  }
  if (parts.length > 5) {
    const merged = [];
    for (const p of parts){
      if (!merged.length) merged.push(p);
      else if (merged[merged.length-1].length < 40) merged[merged.length-1] += ' ' + p;
      else merged.push(p);
      if (merged.length === 5) break;
    }
    parts = merged;
  }
  return parts.map(p => p.trim().replace(/\s+/g,' ')).filter(Boolean);
}
function secsToSrt(ts) {
  const h = Math.floor(ts/3600);
  const m = Math.floor((ts%3600)/60);
  const s = Math.floor(ts%60);
  const ms = Math.floor((ts - Math.floor(ts))*1000);
  const pad = (n, l=2) => `${n}`.padStart(l,'0');
  const pad3 = (n) => `${n}`.padStart(3,'0');
  return `${pad(h)}:${pad(m)}:${pad(s)},${pad3(ms)}`;
}
function buildCaptionDrawtexts(script, duration, fontParam, workId='w') {
  const outDir = ensureGeneratedDir();
  const files = [];
  const WINDOW_START = 0.35, TAIL = 0.80;
  const endWindow = Math.max(WINDOW_START + 1.2, duration - TAIL);
  const total = Math.max(1.2, endWindow - WINDOW_START);
  const segs = splitForCaptions(script);
  if (!segs.length) return { filter:'', files:[], srtPath:'' };

  const lens = segs.map(s=>Math.max(12, Math.min(90, s.length)));
  const sum = lens.reduce((a,b)=>a+b,0);
  let t = WINDOW_START;
  const pieces = [];
  const baseStyle = "fontcolor=white@0.98:borderw=2:bordercolor=black@0.85:shadowx=1:shadowy=1:shadowcolor=black@0.7:box=1:boxcolor=0x000000@0.50:boxborderw=28:fontsize=28:x='(w-tw)/2':y='h*0.84'";
  const srtLines = [];

  for (let i=0;i<segs.length;i++){
    const dur = Math.max(1.2, (lens[i]/sum)*total);
    const start = t; const stop = Math.min(endWindow, t + dur); t = stop + 0.05;
    const tf = path.join(outDir, `cap_${workId}_${i}.txt`);
    try { fs.writeFileSync(tf, segs[i]); files.push(tf); } catch {}
    pieces.push(`drawtext=${fontParam}textfile='${tf}':reload=0:${baseStyle}:enable='between(t,${start.toFixed(2)},${stop.toFixed(2)})'`);
    srtLines.push(`${i+1}\n${secsToSrt(start)} --> ${secsToSrt(stop)}\n${segs[i]}\n`);
    if (t >= endWindow) break;
  }
  const srtPath = path.join(outDir, `sub_${workId}.srt`);
  try { fs.writeFileSync(srtPath, srtLines.join('\n')); } catch {}
  return { filter: pieces.join(','), files, srtPath };
}

/* -------------------- Video constants -------------------- */
const V_W = 1080;
const V_H = 1080;
const FPS = 30;

/* -------------------- Still video / Title card (unchanged) -------------------- */
function pickSerifFontFile() {
  const candidates = [
    '/usr/share/fonts/truetype/msttcorefonts/Times_New_Roman.ttf',
    '/usr/share/fonts/truetype/msttcorefonts/Times_New_Roman_Bold.ttf',
    '/usr/share/fonts/truetype/msttcorefonts/times.ttf',
    '/usr/share/fonts/truetype/freefont/FreeSerif.ttf',
    '/usr/share/fonts/truetype/noto/NotoSerif-Regular.ttf',
    '/usr/share/fonts/truetype/dejavu/DejaVuSerif-Bold.ttf',
    '/usr/share/fonts/truetype/dejavu/DejaVuSerif.ttf'
  ];
  for (const p of candidates) { try { if (fs.existsSync(p)) return p; } catch {} }
  return null;
}

async function composeStillVideo({ imageUrl, duration, ttsPath = null, musicPath = null, brandLine = 'YOUR BRAND!', ctaText = 'LEARN MORE!', scriptText = '' }) {
  housekeeping();
  const outDir = ensureGeneratedDir();
  const id = uuidv4();
  const outFile = `${id}.mp4`;
  const outPath = path.join(outDir, outFile);

  let finalImageUrl = imageUrl || 'https://picsum.photos/seed/smartmark/1200/1200';
  try { await axios.get(finalImageUrl, { timeout: 5000 }); } catch { finalImageUrl = 'https://singlecolorimage.com/get/2b2f33/1200x1200'; }

  let imgFile = null;
  try {
    imgFile = path.join(outDir, `${id}.jpg`);
    const imgRes = await axios.get(finalImageUrl, { responseType: 'arraybuffer', timeout: 9000 });
    fs.writeFileSync(imgFile, imgRes.data);
  } catch { imgFile = null; }

  const sansFile = pickSansFontFile();
  const serifFile = pickSerifFontFile();
  const fontParamSans = sansFile ? `fontfile='${sansFile}':` : `font='Arial':`;
  const fontParamSerif = serifFile ? `fontfile='${serifFile}':` : `font='Times New Roman':`;
  const txtCommon = `fontcolor=white@0.99:borderw=2:bordercolor=black@0.88:shadowx=1:shadowy=1:shadowcolor=black@0.75`;

  const brand = safeFFText(brandLine);
  const cta   = safeFFText(ctaText);

  const TAIL = 0.8;

  const args = ['-y'];
  if (imgFile) { args.push('-loop', '1', '-t', duration.toFixed(2), '-i', imgFile); }
  else { args.push('-f', 'lavfi', '-t', duration.toFixed(2), '-i', `color=c=0x101318:s=${V_W}x${V_H}`); }

  if (ttsPath) args.push('-i', ttsPath);
  if (musicPath) args.push('-i', musicPath);
  args.push('-f', 'lavfi', '-t', duration.toFixed(2), '-i', 'anullsrc=channel_layout=stereo:sample_rate=48000');

  const baseVideo = imgFile
  ? `[0:v]scale='if(gte(iw/ih,1),${V_W},-2)':'if(gte(iw/ih,1),-2,${V_H})':flags=lanczos,` +
    `pad=${V_W}:${V_H}:((${V_W}-iw)/2):(${V_H}-ih)/2,setsar=1,format=yuv420p,` +
    `zoompan=z='min(zoom+0.00025,1.025)':d=${Math.floor(FPS*duration)}:x='(iw-iw/zoom)/2':y='(ih-ih/zoom)/2',fps=${FPS}[cv]`
  : `[0:v]fps=${FPS},format=yuv420p[cv]`;

  const brandIntro = `drawtext=${fontParamSans}text='${brand}':${txtCommon}:fontsize=44:x='(w-tw)/2':y='h*0.10':enable='between(t,0.2,3.1)'`;
  const ctaOutro   = `drawtext=${fontParamSans}text='${cta}':${txtCommon}:box=1:boxcolor=0x0b0d10@0.82:boxborderw=22:fontsize=56:x='(w-tw)/2':y='(h*0.50-20)':enable='gte(t,${(duration-TAIL).toFixed(2)})'`;

  const subsBuild = buildCaptionDrawtexts(scriptText, duration, fontParamSerif, id);
  let fc = `${baseVideo};[cv]${brandIntro}${subsBuild.filter?','+subsBuild.filter:''},${ctaOutro},format=yuv420p[v]`;

  const mixInputs = [];
  let aIdx = 1;
  if (ttsPath) { mixInputs.push(`${aIdx}:a`); aIdx++; }
  if (musicPath) { mixInputs.push(`${aIdx}:a`); aIdx++; }
  mixInputs.push(`${aIdx}:a`);
  fc += `;${mixInputs.map((m,i)=>`[${m}]aresample=48000${i===1?`,volume=0.18`:''}[a${i}]`).join(';')};` +
        `${mixInputs.map((_,i)=>`[a${i}]`).join('')}amix=inputs=${mixInputs.length}:duration=longest:normalize=1[mix]`;

  args.push(
    '-filter_complex', fc, '-map', '[v]', '-map', '[mix]',
    '-t', duration.toFixed(2), '-r', String(FPS),
    '-c:v', 'libx264', '-preset', 'veryfast', '-crf', '22', '-pix_fmt', 'yuv420p',
    '-b:v', '5000k', '-maxrate', '6500k', '-bufsize', '13000k',
    '-g', String(FPS*2), '-keyint_min', String(FPS),
    '-c:a', 'aac', '-b:a', '160k', '-ar', '48000',
    '-movflags', '+faststart', '-shortest', '-avoid_negative_ts', 'make_zero',
    '-max_muxing_queue_size', '1024', '-loglevel', 'error', outPath
  );

  await runSpawn('ffmpeg', args, { killAfter: 90000, killMsg: 'still-video timeout' });

  try { if (imgFile) fs.unlinkSync(imgFile); } catch {}
  try { for (const f of (subsBuild.files||[])) fs.unlinkSync(f); } catch {}
  return {
    publicUrl: mediaPath(outFile),
    absoluteUrl: absolutePublicUrl(mediaPath(outFile)),
    subtitlesUrl: subsBuild.srtPath ? absolutePublicUrl(mediaPath(path.basename(subsBuild.srtPath))) : ''
  };
}

async function composeTitleCardVideo({ duration, ttsPath = null, musicPath = null, brandLine = 'YOUR BRAND!', ctaText = 'LEARN MORE!', scriptText='' }) {
  housekeeping();
  const outDir = ensureGeneratedDir();
  const id = uuidv4();
  const outFile = `${id}.mp4`;
  const outPath = path.join(outDir, outFile);

  const sansFile = pickSansFontFile();
  const serifFile = pickSerifFontFile();
  const fontParamSans = sansFile ? `fontfile='${sansFile}':` : `font='Arial':`;
  const fontParamSerif = serifFile ? `fontfile='${serifFile}':` : `font='Times New Roman':`;
  const txtCommon = `fontcolor=white@0.99:borderw=2:bordercolor=black@0.88:shadowx=1:shadowy=1:shadowcolor=black@0.75`;

  const brand = safeFFText(brandLine);
  const cta   = safeFFText(ctaText);
  const TAIL = 0.8;

  const args = ['-y', '-f', 'lavfi', '-t', duration.toFixed(2), '-i', `color=c=0x101318:s=${V_W}x${V_H}`];
  if (ttsPath) args.push('-i', ttsPath);
  if (musicPath) args.push('-i', musicPath);
  args.push('-f', 'lavfi', '-t', duration.toFixed(2), '-i', 'anullsrc=channel_layout=stereo:sample_rate=48000');

  const intro  = `drawtext=${fontParamSans}text='${brand}':${txtCommon}:fontsize=56:x='(w-tw)/2':y='(h*0.36-88)':enable='between(t,0.3,${(duration-TAIL-0.6).toFixed(2)})'`;
  const ctaFx  = `drawtext=${fontParamSans}text='${cta}':${txtCommon}:box=1:boxcolor=0x0b0d10@0.82:boxborderw=22:fontsize=56:x='(w-tw)/2':y='(h*0.50)':enable='gte(t,${(duration-TAIL).toFixed(2)})'`;
  const subsBuild = buildCaptionDrawtexts(scriptText, duration, fontParamSerif, id);
  let fc = `[0:v]fps=${FPS},format=yuv420p,${intro}${subsBuild.filter?','+subsBuild.filter:''},${ctaFx},format=yuv420p[v]`;

  const mixInputs = [];
  let aIdx = 1;
  if (ttsPath) { mixInputs.push(`${aIdx}:a`); aIdx++; }
  if (musicPath) { mixInputs.push(`${aIdx}:a`); aIdx++; }
  mixInputs.push(`${aIdx}:a`);
  fc += `;${mixInputs.map((m,i)=>`[${m}]aresample=48000${i===1?`,volume=0.18`:''}[b${i}]`).join(';')};` +
        `${mixInputs.map((_,i)=>`[b${i}]`).join('')}amix=inputs=${mixInputs.length}:duration=longest:normalize=1[mix]`;

  args.push(
    '-filter_complex', fc, '-map', '[v]', '-map', '[mix]',
    '-t', duration.toFixed(2), '-r', String(FPS),
    '-c:v', 'libx264', '-preset', 'veryfast', '-crf', '22', '-pix_fmt', 'yuv420p',
    '-b:v', '5000k', '-maxrate', '6500k', '-bufsize', '13000k',
    '-g', String(FPS*2), '-keyint_min', String(FPS),
    '-c:a', 'aac', '-b:a', '160k', '-ar', '48000',
    '-movflags', '+faststart', '-shortest', '-avoid_negative_ts', 'make_zero',
    '-max_muxing_queue_size', '1024', '-loglevel', 'error', outPath
  );

  await runSpawn('ffmpeg', args, { killAfter: 80000, killMsg: 'title-card timeout' });
  try { for (const f of (subsBuild.files||[])) fs.unlinkSync(f); } catch {}
  return {
    publicUrl: mediaPath(outFile),
    absoluteUrl: absolutePublicUrl(mediaPath(outFile)),
    subtitlesUrl: subsBuild.srtPath ? absolutePublicUrl(mediaPath(path.basename(subsBuild.srtPath))) : ''
  };
}

/* ------------------------------- VIDEO (unchanged core; with image-only escape) ------------------------------- */
router.post('/generate-video-ad', heavyLimiter, async (req, res) => {
  housekeeping();
  setCors(res, req.headers.origin);
  try { if (typeof res.setTimeout === 'function') res.setTimeout(180000); if (typeof req.setTimeout === 'function') req.setTimeout(180000); } catch {}
  res.setHeader('Content-Type', 'application/json');

  if (IMAGE_ONLY_MODE || DISABLE_VIDEO) {
    try {
      const { url = '', answers = {}, regenerateToken = '' } = req.body;
      const category = resolveCategory(answers || {});
      const topic = deriveTopicKeywords(answers, url, 'ecommerce');
      const seedBase = regenerateToken || answers?.businessName || topic || Date.now();

      let imageUrl = null;
      if (PEXELS_API_KEY) {
        try {
          const r = await axios.get('https://api.pexels.com/v1/search', {
            headers: { Authorization: PEXELS_API_KEY },
            params: { query: topic, per_page: 10, orientation: 'landscape', size: 'large', cb: Date.now() + (regenerateToken || '') },
            timeout: 6000
          });
          const photos = r.data?.photos || [];
          if (photos.length) {
            const idx = (seedrandom(String(seedBase))()*photos.length)|0;
            imageUrl = photos[idx].src.large2x || photos[idx].src.original || photos[idx].src.large || null;
          }
        } catch {}
      }
      if (!imageUrl) imageUrl = await getRecentImageForOwner(req);
      if (!imageUrl) imageUrl = 'https://picsum.photos/seed/smartmark/1200/628';

      const headline = overlayTitleFromAnswers(answers, category);
      const cta = pickFromAllowedCTAs(answers, seedBase);
      const tagline = overlaySublineFromAnswers(answers);
      const built = await buildOverlayImage({ imageUrl, headlineHint: headline, ctaHint: cta, tagline, seed: seedBase });

      await saveAsset({ req, kind: 'image', url: built.publicUrl, absoluteUrl: built.absoluteUrl, meta: { topic, category, mode: 'video_stub_image' } });

      return res.json({
        videoUrl: '',
        absoluteVideoUrl: '',
        subtitlesUrl: '',
        script: '',
        ctaText: cta,
        voice: null,
        hasMusic: false,
        video: { url: '', script: '', overlayText: cta, voice: null, hasMusic: false, subtitlesUrl: '' },
        videoVariations: [],
        imageUrl: built.publicUrl,
        imageAbsoluteUrl: built.absoluteUrl,
        mode: 'image_only'
      });
    } catch (err) {
      return res.status(500).json({ error: 'Failed to generate (image-only mode)', detail: err?.message || 'Unknown error' });
    }
  }

  /* full video path unchanged from your previous version (omitted for brevity to keep focus on static) */
  return res.status(503).json({ error: 'Video temporarily disabled. Set IMAGE_ONLY_MODE=0 to enable.' });
});

/* --------------------- IMAGE: search + overlay (3 variations, more robust) --------------------- */
router.post('/generate-image-from-prompt', heavyLimiter, async (req, res) => {
  housekeeping();
  setCors(res, req.headers.origin);
  try { if (typeof res.setTimeout === 'function') res.setTimeout(60000); if (typeof req.setTimeout === 'function') req.setTimeout(60000); } catch {}
  try {
    const { regenerateToken = '' } = req.body;
    const top = req.body || {};
    const answers = top.answers || top;
    const url = answers.url || top.url || '';
    const industry = answers.industry || top.industry || '';
    const category = resolveCategory(answers || {});
    const keyword = getImageKeyword(industry, url);
    const tagline = overlaySublineFromAnswers(answers);
    const headlineHint = overlayTitleFromAnswers(answers, category);

    const makeOne = async (baseUrl, seed) => {
      const ctaHint = pickFromAllowedCTAs(answers, seed);
      try {
        const { publicUrl, absoluteUrl } = await buildOverlayImage({
          imageUrl: baseUrl, headlineHint, ctaHint, tagline, seed, fallbackHeadline: headlineHint
        });
        await saveAsset({ req, kind: 'image', url: publicUrl, absoluteUrl, meta: { keyword, overlayText: ctaHint, headlineHint, tagline, category } });
        return publicUrl;
      } catch {
        await saveAsset({ req, kind: 'image', url: baseUrl, absoluteUrl: baseUrl, meta: { keyword, overlayText: ctaHint, headlineHint, tagline, raw: true, category } });
        return baseUrl;
      }
    };

    if (!PEXELS_API_KEY) {
      const urls = [];
      for (let i=0;i<3;i++){
        const { publicUrl, absoluteUrl } = await buildOverlayImage({
          imageUrl: 'https://picsum.photos/seed/smartmark'+i+'/1200/628',
          headlineHint,
          ctaHint: pickFromAllowedCTAs(answers, regenerateToken + '_' + i),
          tagline,
          seed: regenerateToken + '_' + i,
          fallbackHeadline: headlineHint
        });
        await saveAsset({ req, kind: 'image', url: publicUrl, absoluteUrl, meta: { category, keyword, placeholder: true, i } });
        urls.push(publicUrl);
      }
      return res.json({ imageUrl: urls[0], keyword, totalResults: 3, usedIndex: 0, imageVariations: urls.map(u => ({ url: u })) });
    }

    let photos = [];
    try {
      const r = await axios.get(PEXELS_IMG_BASE, {
        headers: { Authorization: PEXELS_API_KEY },
        params: { query: keyword, per_page: 40, orientation: 'landscape', size: 'large', cb: Date.now() + (regenerateToken || '') },
        timeout: 8000
      });
      photos = r.data.photos || [];
    } catch {
      return res.status(500).json({ error: 'Image search failed' });
    }
    if (!photos.length) return res.status(404).json({ error: 'No images found.' });

    const seed = regenerateToken || answers?.businessName || keyword || Date.now();
    let idxHash = 0; for (const c of String(seed)) idxHash = (idxHash*31 + c.charCodeAt(0))>>>0;

    const picks = [];
    for (let i=0;i<photos.length && picks.length<3;i++){
      const idx = (idxHash + i*7) % photos.length;
      if (!picks.includes(idx)) picks.push(idx);
    }

    const urls = await Promise.all(picks.map(async (pi, k) => {
      const img = photos[pi];
      const baseUrl = img.src.large2x || img.src.original || img.src.large;
      return await makeOne(baseUrl, seed + '_' + k);
    }));

    const img0 = photos[picks[0]];
    res.json({
      imageUrl: urls[0],
      photographer: img0?.photographer,
      pexelsUrl: img0?.url,
      keyword,
      totalResults: photos.length,
      usedIndex: picks[0],
      imageVariations: urls.map(u => ({ url: u }))
    });
  } catch (e) {
    setCors(res, req.headers.origin);
    res.status(500).json({ error: 'Failed to fetch stock image', detail: e.message });
  }
});

/* ------------------------- RECENT ------------------------- */
async function listRecentForOwner(req) {
  await purgeExpiredAssets();
  const owner = ownerKeyFromReq(req);
  return (db.data.generated_assets || [])
    .filter(a => a.owner === owner)
    .sort((a, b) => b.createdAt - a.createdAt)
    .slice(0, 50);
}
router.get('/recent', async (req, res) => {
  try { const items = await listRecentForOwner(req); res.json({ items, ttlMs: ASSET_TTL_MS }); }
  catch { res.status(500).json({ error: 'Failed to load recent assets' }); }
});
router.get('/assets/recent', async (req, res) => {
  try { const items = await listRecentForOwner(req); res.json({ items, ttlMs: ASSET_TTL_MS }); }
  catch { res.status(500).json({ error: 'Failed to load recent assets' }); }
});
router.get('/recent-assets', async (req, res) => {
  try { const items = await listRecentForOwner(req); res.json({ items, ttlMs: ASSET_TTL_MS }); }
  catch { res.status(500).json({ error: 'Failed to load recent assets' }); }
});

/* -------- clear recent -------- */
router.post('/assets/clear', async (req, res) => {
  try {
    await ensureAssetsTable();
    const owner = ownerKeyFromReq(req);
    db.data.generated_assets = (db.data.generated_assets || []).filter(a => a.owner !== owner);
    await db.write();
    housekeeping();
    res.json({ success: true });
  } catch {
    res.status(500).json({ error: 'Failed to clear assets' });
  }
});

/* -------- Ensure CORS even on errors -------- */
router.use((err, req, res, _next) => {
  try { setCors(res, req.headers.origin); } catch {}
  const code = err?.status || 500;
  res.status(code).json({ error: err?.message || 'Server error' });
});

module.exports = router;

/* ----------------------------------------------------------------------
Recommended env (no new files created):
  ASSET_TTL_MS=21600000
  MAX_TMP_BYTES=314572800
  FRONTEND_ORIGIN=https://smartmark-mvp.vercel.app
  IMAGE_ONLY_MODE=1         # keep while video path is disabled
---------------------------------------------------------------------- */
